// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

generator graphql {
  provider           = "prisma-nestjs-graphql"
  output             = "../apps/admin/src/@generated"
  purgeOutput        = true
  noAtomicOperations = true
  // emitCompiled       = true
  emitSingle         = true
  reExport           = Single
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  User
  Manager
  Admin
  SuperAdmin
}

enum Provider {
  github
  kakao
  naver
  google
}

model User {
  id               Int       @id @default(autoincrement())
  username         String    @unique
  /// @HideField()
  password         String
  role             Role      @default(User)
  email            String    @unique
  studentId        String    @default("0000000000") @map("student_id")
  major            String?   @default("none")
  lastLogin        DateTime? @map("last_login")
  createTime       DateTime  @default(now()) @map("create_time")
  updateTime       DateTime  @updatedAt @map("update_time")
  canCreateCourse  Boolean   @default(false) @map("can_create_course")
  canCreateContest Boolean   @default(false) @map("can_create_contest")

  userProfile      UserProfile?
  userGroup        UserGroup[]
  notice           Notice[]
  problem          Problem[]
  assignment       Assignment[]
  assignmentRecord AssignmentRecord[]
  contest          Contest[]
  contestRecord    ContestRecord[]
  workbook         Workbook[]
  submission       Submission[]
  useroauth        UserOAuth?
  CodeDraft        CodeDraft[]
  Image            Image[]
  testSubmission   TestSubmission[]

  @@map("user")
}

model UserOAuth {
  id         String // social ID (OAuth 서비스로부터 제공받는 id)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int      @unique @map("user_id")
  provider   Provider
  createTime DateTime @default(now()) @map("create_time")
  updateTime DateTime @updatedAt @map("update_time")

  @@id([id, provider])
  @@map("user_oauth")
}

model UserProfile {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int      @unique @map("user_id")
  realName   String   @map("real_name")
  createTime DateTime @default(now()) @map("create_time")
  updateTime DateTime @updatedAt @map("update_time")

  @@map("user_profile")
}

model UserGroup {
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int      @map("user_id")
  group         Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId       Int      @map("group_id")
  isGroupLeader Boolean  @default(false) @map("is_group_leader")
  createTime    DateTime @default(now()) @map("create_time")
  updateTime    DateTime @updatedAt @map("update_time")

  @@id([userId, groupId])
  @@map("user_group")
}

enum GroupType {
  Course
  Study
}

model Group {
  id          Int         @id @default(autoincrement())
  groupName   String      @map("group_name")
  groupType   GroupType   @default(Course) @map("group_type")
  courseInfo  CourseInfo?
  description String?
  /// config default value
  /// {
  ///   "showOnList": true,          // show on 'all groups' list
  ///   "allowJoinFromSearch": true, // can join from 'all groups' list. set to false if `showOnList` is false
  ///   "allowJoinWithURL": false,
  ///   "requireApprovalBeforeJoin": true
  /// }
  config      Json
  createTime  DateTime    @default(now()) @map("create_time")
  updateTime  DateTime    @updatedAt @map("update_time")

  userGroup      UserGroup[]
  notice         Notice[]
  assignment     Assignment[]
  workbook       Workbook[]
  GroupWhitelist GroupWhitelist[]
  sharedProblems Problem[]

  @@map("group")
}

model GroupWhitelist {
  group     Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   Int    @map("group_id")
  studentId String @map("student_id")

  @@id([groupId, studentId])
  @@map("group_whitelist")
}

model CourseInfo {
  groupId   Int     @id @map("group_id")
  group     Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  courseNum String  @map("course_num")
  classNum  Int?    @map("class_num")
  professor String
  semester  String
  email     String?
  website   String?
  office    String?
  phoneNum  String? @map("phone_num")
  week      Int     @default(16) //양수만 허용됨

  @@map("course_info")
}

model Notice {
  id          Int      @id @default(autoincrement())
  createdBy   User?    @relation(fields: [createdById], references: [id], onDelete: SetNull)
  createdById Int?     @map("created_by_id")
  group       Group?   @relation(fields: [groupId], references: [id])
  groupId     Int?     @map("group_id")
  title       String
  content     String
  isVisible   Boolean  @default(true) @map("is_visible")
  isFixed     Boolean  @default(false) @map("is_fixed")
  createTime  DateTime @default(now()) @map("create_time")
  updateTime  DateTime @updatedAt @map("update_time")

  @@map("notice")
}

model Problem {
  id          Int   @id @default(autoincrement())
  createdBy   User? @relation(fields: [createdById], references: [id], onDelete: SetNull)
  createdById Int?  @map("created_by_id")

  title             String
  description       String
  inputDescription  String @map("input_description")
  outputDescription String @map("output_description")
  hint              String

  // 문제 정보의 영어 버전 제공은 선택사항임
  engTitle             String? @map("eng_title")
  engDescription       String? @map("eng_description")
  engInputDescription  String? @map("eng_input_description")
  engOutputDescription String? @map("eng_output_description")
  engHint              String? @map("eng_hint")

  /// template code item structure
  /// {
  ///   "lanaguage": Language,
  ///   "code": {
  ///             "id": number,
  ///             "text": string,
  ///             "locked": boolean
  ///           }[]
  /// }

  template        Json[]     @default([])
  languages       Language[]
  timeLimit       Int        @map("time_limit") // unit: MilliSeconds
  memoryLimit     Int        @map("memory_limit") // unit: MegaBytes
  difficulty      Level
  source          String
  submissionCount Int        @default(0) @map("submission_count")
  acceptedCount   Int        @default(0) @map("accepted_count")
  acceptedRate    Float      @default(0) @map("accepted_rate")
  visibleLockTime DateTime   @map("visible_lock_time")
  // 문제가 속한 대회들이 모두 끝나는 시각으로 이후 문제의 공개 여부를 변경가능, 속한 대회가 없을 경우 MIN_DATE
  // MIN_DATE의 경우 모든 사용자에게 공개, 이외에는 비공개
  createTime      DateTime   @default(now()) @map("create_time")
  updateTime      DateTime   @updatedAt @map("update_time")

  sharedGroups      Group[]
  problemTestcase   ProblemTestcase[]
  problemTag        ProblemTag[]
  assignmentProblem AssignmentProblem[]
  workbookProblem   WorkbookProblem[]
  contestProblem    ContestProblem[]
  submission        Submission[]
  announcement      Announcement[]
  codeDraft         CodeDraft[]
  testSubmission    TestSubmission[]

  @@map("problem")
}

model Image {
  filename    String   @id @unique
  createdBy   User?    @relation(fields: [createdById], references: [id], onDelete: SetNull)
  createdById Int?
  createTime  DateTime @default(now()) @map("create_time")

  @@map("image")
}

enum Level {
  Level1
  Level2
  Level3
  Level4
  Level5
}

enum Language {
  C
  Cpp
  Java
  Python2
  Python3
  Golang
}

model ProblemTestcase {
  id          Int      @id @default(autoincrement())
  problem     Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  problemId   Int      @map("problem_id")
  input       String // url to corresponding file
  output      String
  scoreWeight Int      @default(1) @map("score_weight")
  isHidden    Boolean  @default(false) @map("is_hidden_testcase")
  createTime  DateTime @default(now()) @map("create_time")
  updateTime  DateTime @updatedAt @map("update_time")

  submissionResult SubmissionResult[]

  @@map("problem_testcase")
}

model ProblemTag {
  id        Int     @id @default(autoincrement())
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  problemId Int     @map("problem_id")
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId     Int     @map("tag_id")

  @@map("problem_tag")
}

model Tag {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  createTime DateTime @default(now()) @map("create_time")
  updateTime DateTime @updatedAt @map("update_time")

  problemTag ProblemTag[]

  @@map("tag")
}

model Assignment {
  id                   Int      @id @default(autoincrement())
  createdBy            User?    @relation(fields: [createdById], references: [id], onDelete: SetNull)
  createdById          Int?     @map("created_by_id")
  group                Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId              Int      @map("group_id")
  week                 Int      @default(1)
  title                String
  description          String
  startTime            DateTime @map("start_time")
  endTime              DateTime @map("end_time")
  isVisible            Boolean  @default(true) @map("is_visible")
  isRankVisible        Boolean  @default(true) @map("is_rank_visible")
  isJudgeResultVisible Boolean  @default(true) @map("is_judge_result_visible") // 이 Assignment에 포함된 문제의 Judge Result를 사용자에게 보여줄지 말지 결정합니다.
  enableCopyPaste      Boolean  @default(true) @map("enable_copy_paste") // 이 Assignment에 포함된 문제의 코드 에디터에서 복사-붙여넣기를 허용합니다.
  createTime           DateTime @default(now()) @map("create_time")
  updateTime           DateTime @updatedAt @map("update_time")

  assignmentProblem AssignmentProblem[]
  assignmentRecord  AssignmentRecord[]
  submission        Submission[]
  announcement      Announcement[]
  testSubmission    TestSubmission[]

  @@index([groupId, week])
  @@map("assignment")
}

model AssignmentProblem {
  order                   Int
  assignment              Assignment                @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId            Int                       @map("assignment_id")
  problem                 Problem                   @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId               Int                       @map("problem_id")
  // 각 문제의 점수 (비율 아님)
  score                   Int                       @default(0)
  createTime              DateTime                  @default(now()) @map("create_time")
  updateTime              DateTime                  @updatedAt @map("update_time")
  assignmentProblemRecord AssignmentProblemRecord[]

  @@id([assignmentId, problemId])
  //@@unique([assignmentId, problemId])
  @@map("assignment_problem")
}

model AssignmentRecord {
  id                      Int                       @id @default(autoincrement())
  assignment              Assignment                @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId            Int                       @map("assignment_id")
  user                    User?                     @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId                  Int?                      @map("user_id")
  acceptedProblemNum      Int                       @default(0) @map("accepted_problem_num")
  score                   Int                       @default(0)
  // finishTime: Pariticipant가 가장 최근에 AC를 받은 시각
  finishTime              DateTime?                 @map("finish_time")
  // totalPenalty: Submission 시, AC를 받지 못했을 때, 올라가는 Counter
  totalPenalty            Int                       @default(0) @map("total_penalty")
  createTime              DateTime                  @default(now()) @map("create_time")
  updateTime              DateTime                  @updatedAt @map("update_time")
  assignmentProblemRecord AssignmentProblemRecord[]

  @@unique([assignmentId, userId])
  @@map("assignment_record")
}

model AssignmentProblemRecord {
  assignmentId Int
  userId       Int
  problemId    Int

  score       Int     @default(0)
  isSubmitted Boolean @default(false) @map("is_submitted")
  isAccepted  Boolean @default(false) @map("is_accepted")

  assignmentProblem AssignmentProblem @relation(fields: [assignmentId, problemId], references: [assignmentId, problemId], onDelete: Cascade)
  assignmentRecord  AssignmentRecord  @relation(fields: [assignmentId, userId], references: [assignmentId, userId], onDelete: Cascade)

  @@id([assignmentId, userId, problemId])
  @@map("assignment_problem_record")
}

model Contest {
  id                   Int       @id @default(autoincrement())
  createdBy            User?     @relation(fields: [createdById], references: [id], onDelete: SetNull)
  createdById          Int?      @map("created_by_id")
  title                String
  description          String
  // 대회의 페널티 (0 ≤ penalty ≤ 100),
  penalty              Int       @default(0)
  lastPenalty          Boolean   @default(false) @map("last_penalty")
  posterUrl            String?
  participationTarget  String?
  competitionMethod    String?
  rankingMethod        String?
  problemFormat        String?
  benefits             String?
  invitationCode       String?   @map("invitation_code")
  startTime            DateTime  @map("start_time")
  endTime              DateTime  @map("end_time")
  freezeTime           DateTime? @map("freeze_time")
  isVisible            Boolean   @default(true) @map("is_visible")
  isRankVisible        Boolean   @default(true) @map("is_rank_visible")
  isJudgeResultVisible Boolean   @default(true) @map("is_judge_result_visible") // 이 Contest에 포함된 문제의 Judge Result를 사용자에게 보여줄지 말지 결정합니다.
  enableCopyPaste      Boolean   @default(true) @map("enable_copy_paste") // 이 Contest에 포함된 문제의 코드 에디터에서 복사-붙여넣기를 허용합니다.
  createTime           DateTime  @default(now()) @map("create_time")
  updateTime           DateTime  @updatedAt @map("update_time")

  contestProblem ContestProblem[]
  contestRecord  ContestRecord[]
  submission     Submission[]
  announcement   Announcement[]
  testSubmission TestSubmission[]

  @@map("contest")
}

model ContestProblem {
  id                   Int                    @id @default(autoincrement())
  order                Int
  contest              Contest                @relation(fields: [contestId], references: [id], onDelete: Cascade)
  contestId            Int                    @map("contest_id")
  problem              Problem                @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId            Int                    @map("problem_id")
  // 각 문제의 점수 (비율 아님)
  score                Int                    @default(0)
  createTime           DateTime               @default(now()) @map("create_time")
  updateTime           DateTime               @updatedAt @map("update_time")
  contestProblemRecord ContestProblemRecord[]

  // @@id([contestId, problemId])
  @@unique([contestId, problemId])
  @@map("contest_problem")
}

model ContestProblemRecord {
  contestProblemId        Int       @map("contest_problem_id")
  contestRecordId         Int       @map("contest_record_id")
  score                   Int       @default(0)
  // finishTime: Pariticipant가 가장 최근에 좋은 제출을 받은 시각
  finishTime              DateTime? @map("finish_time")
  // (좋은 제출 전까지 유저 u가 문제 p에 제출한 횟수) × (대회의 페널티)
  submitCountPenalty      Int       @default(0)
  // 대회 시작부터 좋은 제출이 제출되기까지 쇼요된 시간, 단위는 분
  timePenalty             Int       @default(0)
  finalScore              Int       @default(0) @map("final_score")
  finalTimePenalty        Int       @default(0) @map("final_time_penalty")
  finalSubmitCountPenalty Int       @default(0) @map("final_submit_count_penalty")
  isFirstSolver           Boolean   @default(false) @map("is_first_solver")
  createTime              DateTime  @default(now()) @map("create_time")
  updateTime              DateTime  @updatedAt @map("update_time")

  contestProblem ContestProblem @relation(fields: [contestProblemId], references: [id], onDelete: Cascade)
  contestRecord  ContestRecord  @relation(fields: [contestRecordId], references: [id], onDelete: Cascade)

  @@id([contestProblemId, contestRecordId])
  @@map("contest_problem_record")
}

model ContestRecord {
  id                   Int                    @id @default(autoincrement())
  contest              Contest                @relation(fields: [contestId], references: [id], onDelete: Cascade)
  contestId            Int                    @map("contest_id")
  user                 User?                  @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId               Int?                   @map("user_id")
  acceptedProblemNum   Int                    @default(0) @map("accepted_problem_num")
  score                Int                    @default(0)
  finalScore           Int                    @default(0) @map("final_score")
  // finishTime: Pariticipant가 가장 최근에 AC를 받은 시각
  lastAcceptedTime     DateTime?              @map("finish_time")
  // totalPenalty: Submission 시, AC를 받지 못했을 때, 올라가는 Counter
  totalPenalty         Int                    @default(0) @map("total_penalty")
  finalTotalPenalty    Int                    @default(0) @map("final_total_penalty")
  createTime           DateTime               @default(now()) @map("create_time")
  updateTime           DateTime               @updatedAt @map("update_time")
  contestProblemRecord ContestProblemRecord[]

  @@unique([contestId, userId])
  @@map("contest_record")
}

model Announcement {
  id           Int         @id @default(autoincrement())
  content      String
  // Assignment와 Contest 둘 중 하나만 설정되어 있어야 합니다 (XOR)
  // 아닐시 DB단에서 에러 반환, 20250108111635_add_contest_tables migration 참고
  assignment   Assignment? @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId Int?        @map("assignment_id")
  contest      Contest?    @relation(fields: [contestId], references: [id], onDelete: Cascade)
  contestId    Int?        @map("contest_id")
  problem      Problem?    @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId    Int?        @map("problem_id")
  createTime   DateTime    @default(now()) @map("create_time")
  updateTime   DateTime    @updatedAt @map("update_time")

  @@unique([id])
  @@map("announcement")
}

model Workbook {
  id          Int      @id @default(autoincrement())
  createdBy   User?    @relation(fields: [createdById], references: [id], onDelete: SetNull)
  createdById Int?     @map("created_by_id")
  group       Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId     Int      @map("group_id")
  title       String
  description String
  isVisible   Boolean  @default(true) @map("is_visible")
  createTime  DateTime @default(now()) @map("create_time")
  updateTime  DateTime @updatedAt @map("update_time")

  workbookProblem WorkbookProblem[]
  submission      Submission[]
  testSubmission  TestSubmission[]

  @@map("workbook")
}

model WorkbookProblem {
  order      Int
  workbook   Workbook @relation(fields: [workbookId], references: [id], onDelete: Cascade)
  workbookId Int      @map("workbook_id")
  problem    Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId  Int      @map("problem_id")
  createTime DateTime @default(now()) @map("create_time")
  updateTime DateTime @updatedAt @map("update_time")

  @@id([workbookId, problemId])
  // @@unique([workbookId, problemId])
  @@map("workbook_problem")
}

model Submission {
  id           Int          @id @default(autoincrement())
  user         User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId       Int?         @map("user_id")
  userIp       String?      @map("user_ip")
  problem      Problem      @relation(fields: [problemId], references: [id], onDelete: Cascade)
  // Todo :
  // Regardless problem deletion, Keeping submission is positive for ranking or something ....
  problemId    Int          @map("problem_id")
  assignment   Assignment?  @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId Int?         @map("assignment_id")
  contest      Contest?     @relation(fields: [contestId], references: [id], onDelete: Cascade)
  contestId    Int?         @map("contest_id")
  workbook     Workbook?    @relation(fields: [workbookId], references: [id])
  workbookId   Int?         @map("workbook_id")
  /// code item structure
  /// {
  ///   "id": number,
  ///   "text": string,
  ///   "locked": boolean
  /// }
  code         Json[]
  codeSize     Int?         @map("code_size")
  language     Language
  result       ResultStatus
  score        Int          @default(0) /// 100점 만점 기준 점수
  createTime   DateTime     @default(now()) @map("create_time")
  updateTime   DateTime     @updatedAt @map("update_time")

  submissionResult SubmissionResult[]

  @@map("submission")
}

model SubmissionResult {
  id                Int             @id @default(autoincrement())
  submission        Submission      @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  submissionId      Int             @map("submission_id")
  problemTestcase   ProblemTestcase @relation(fields: [problemTestcaseId], references: [id], onDelete: Cascade)
  problemTestcaseId Int             @map("problem_test_case_id")
  result            ResultStatus
  cpuTime           BigInt?         @map("cpu_time")
  memoryUsage       Int?            @map("memory_usage")
  createTime        DateTime        @default(now()) @map("create_time")
  updateTime        DateTime        @updatedAt @map("update_time")

  @@map("submission_result")
}

enum ResultStatus {
  Judging
  Accepted
  WrongAnswer
  CompileError
  RuntimeError
  TimeLimitExceeded
  MemoryLimitExceeded
  OutputLimitExceeded
  ServerError
  SegmentationFaultError
  Blind // isJudgeResultVisible == False로 설정된 Assignment/Contest의 채점 결과를 반환할 때 사용
}

model CodeDraft {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int     @map("user_id")
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId Int     @map("problem_id")

  /// template code item structure
  /// {
  ///   "lanaguage": Language,
  ///   "code": {
  ///             "id": number,
  ///             "text": string,
  ///             "locked": boolean
  ///           }[]
  /// }
  template   Json[]
  createTime DateTime @default(now()) @map("create_time")
  updateTime DateTime @updatedAt @map("update_time")

  @@id(name: "codeDraftId", [userId, problemId])
  @@map("code_draft")
}

model TestSubmission {
  id             Int         @id @default(autoincrement())
  user           User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId         Int?        @map("user_id")
  userIp         String?     @map("user_ip")
  problem        Problem     @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId      Int         @map("problem_id")
  assignment     Assignment? @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId   Int?        @map("assignment_id")
  contest        Contest?    @relation(fields: [contestId], references: [id], onDelete: Cascade)
  contestId      Int?        @map("contest_id")
  workbook       Workbook?   @relation(fields: [workbookId], references: [id])
  workbookId     Int?        @map("workbook_id")
  /// code item structure
  /// {
  ///   "id": number,
  ///   "text": string,
  ///   "locked": boolean
  /// }
  language       Language
  code           Json[]
  codeSize       Int?        @map("code_size")
  isUserTest     Boolean     @default(false) @map("is_user_test")
  maxCpuTime     BigInt?     @map("max_cpu_time")
  maxMemoryUsage Int?        @map("max_memory_usage")

  createTime DateTime @default(now()) @map("create_time")
  updateTime DateTime @updatedAt @map("update_time")

  @@map("test_submission")
}
