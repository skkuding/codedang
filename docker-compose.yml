version: '3'

services:
  app:
    profiles: ['devcontainer']
    container_name: codedang-dev
    build:
      context: .
      dockerfile: .devcontainer/Dockerfile
    volumes:
      - .:/workspace:cached
    depends_on:
      - rabbitmq
      - database
    stdin_open: true
    tty: true
    env_file: .env.development
    environment:
      DEVCONTAINER: 1
    network_mode: host

  testcase:
    container_name: codedang-testcase
    image: minio/minio
    ports:
      - 9000:9000
      - 9001:9001
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: skku
      MINIO_ROOT_PASSWORD: skku1234
    volumes:
      - codedang-testcase:/data

  database:
    container_name: codedang-database
    image: postgres:16-alpine
    ports:
      - 5433:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: skkuding
    volumes:
      - codedang-database:/var/lib/postgresql/data

  cache:
    container_name: codedang-cache
    image: redis:7-alpine
    ports:
      - 6380:6379

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: codedang-rabbitmq
    ports:
      - 15672:15672 # Admin Management
      - 5672:5672
    env_file: .env.development
    environment:
      RABBITMQ_ERLANG_COOKIE: RabbitMQ-My-Cookies
    volumes:
      - codedang-rabbitmq:/var/lib/rabbitmq

  caddy:
    profiles: ['deploy']
    image: caddy:2.7.6-alpine
    container_name: caddy
    restart: always
    ports:
      - '80:80'
      - '443:443'
    network_mode: host

  backend-client:
    profiles: ['deploy', 'update-target']
    image: ghcr.io/skkuding/codedang-client-api:latest
    container_name: backend-client
    restart: always
    depends_on:
      setup:
        condition: service_completed_successfully
    env_file:
      - .env.development
      - .env
    network_mode: host

  backend-admin:
    profiles: ['deploy', 'update-target']
    image: ghcr.io/skkuding/codedang-admin-api:latest
    container_name: backend-admin
    restart: always
    depends_on:
      setup:
        condition: service_completed_successfully
    env_file:
      - .env.development
      - .env
    network_mode: host

  iris:
    profiles: ['deploy', 'update-target']
    image: ghcr.io/skkuding/codedang-iris:latest
    container_name: iris
    restart: always
    read_only: true
    depends_on:
      setup:
        condition: service_completed_successfully
    env_file: .env.development
    network_mode: host

  promtail:
    profiles: ['deploy']
    image: grafana/promtail
    container_name: grafana-promtail
    restart: on-failure
    env_file: .env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./grafana-logs/promtail/promtail-config.yml:/etc/promtail/promtail-config.yml
    command:
      - -config.file=/etc/promtail/promtail-config.yml
      - -config.expand-env=true
    network_mode: host

  dozzle:
    profiles: ['deploy']
    image: amir20/dozzle:latest
    container_name: dozzle
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 9999:8080
    environment:
      DOZZLE_BASE: /logs

  setup:
    profiles: ['deploy']
    image: python:3-bullseye # Python for rabbitmqadmin
    container_name: setup
    depends_on:
      - rabbitmq
      - database
      - testcase
    volumes:
      - $PWD/scripts:/etc/scripts
      # - $PWD/dist:/etc/dist:z
    network_mode: host
    command: ['/bin/bash', '/etc/scripts/deploy.sh']

volumes:
  codedang-testcase:
  codedang-database:
  codedang-rabbitmq:
