{
    "_id": "089b01d8-96da-497e-8921-f5df86e4d23c",
    "colName": "Codedang Admin API",
    "created": "2023-05-02T10:59:44.408Z",
    "sortNum": 20000,
    "folders": [
        {
            "_id": "fe52bede-3550-4899-9738-50719d9b04ef",
            "name": "Group",
            "containerId": "",
            "created": "2023-07-01T08:36:12.949Z",
            "sortNum": 10000
        },
        {
            "_id": "e301836d-c693-4efe-a13b-59250583415f",
            "name": "Get Group",
            "containerId": "fe52bede-3550-4899-9738-50719d9b04ef",
            "created": "2023-07-01T08:36:36.695Z",
            "sortNum": 30000
        },
        {
            "_id": "50fd1447-8e48-415a-adb8-29d7d7f742cc",
            "name": "Get Groups (Admin)",
            "containerId": "fe52bede-3550-4899-9738-50719d9b04ef",
            "created": "2023-07-01T08:38:28.308Z",
            "sortNum": 22500
        },
        {
            "_id": "771ab14a-f583-4a94-a34e-4f8e8b569d8b",
            "name": "Create Group",
            "containerId": "fe52bede-3550-4899-9738-50719d9b04ef",
            "created": "2023-07-01T08:38:49.546Z",
            "sortNum": 15000
        },
        {
            "_id": "2e6dd7d6-4110-4bd0-9138-660931d2a26d",
            "name": "Update Group",
            "containerId": "fe52bede-3550-4899-9738-50719d9b04ef",
            "created": "2023-07-01T08:38:57.241Z",
            "sortNum": 70000
        },
        {
            "_id": "5cbf039a-6e9c-4321-93c2-e297a12b480e",
            "name": "Delete Group",
            "containerId": "fe52bede-3550-4899-9738-50719d9b04ef",
            "created": "2023-07-01T08:39:04.697Z",
            "sortNum": 80000
        },
        {
            "_id": "0d9f4339-a50a-495e-a790-e998f7db5f92",
            "name": "Contest",
            "containerId": "",
            "created": "2023-07-13T12:00:00.047Z",
            "sortNum": 90000
        },
        {
            "_id": "6ecc2072-81d3-4785-adf3-fc04f8443178",
            "name": "Get Contests",
            "containerId": "0d9f4339-a50a-495e-a790-e998f7db5f92",
            "created": "2023-07-13T12:00:08.350Z",
            "sortNum": 100000
        },
        {
            "_id": "14096886-1667-4723-a496-c3d5127a4a95",
            "name": "Create Contest",
            "containerId": "0d9f4339-a50a-495e-a790-e998f7db5f92",
            "created": "2023-07-13T12:06:56.628Z",
            "sortNum": 110000
        },
        {
            "_id": "3023a28d-732b-48f7-999d-e1d620456602",
            "name": "Update Contest",
            "containerId": "0d9f4339-a50a-495e-a790-e998f7db5f92",
            "created": "2023-07-13T12:11:18.338Z",
            "sortNum": 130000
        },
        {
            "_id": "ce343dbe-8fd1-41ea-9c0a-323265757482",
            "name": "Delete Contest",
            "containerId": "0d9f4339-a50a-495e-a790-e998f7db5f92",
            "created": "2023-07-13T12:16:36.432Z",
            "sortNum": 140000
        },
        {
            "_id": "9fc6bef0-ed6d-43a6-a09c-652fdd0074c0",
            "name": "Get Publicizing Requests",
            "containerId": "0d9f4339-a50a-495e-a790-e998f7db5f92",
            "created": "2023-07-13T12:24:47.599Z",
            "sortNum": 160000
        },
        {
            "_id": "33e66082-5553-4ef8-901d-c26bd4f50775",
            "name": "Create Publicizing Request",
            "containerId": "0d9f4339-a50a-495e-a790-e998f7db5f92",
            "created": "2023-07-13T12:25:11.046Z",
            "sortNum": 170000
        },
        {
            "_id": "6920af5c-ce95-4485-b9a8-5eb56312fddb",
            "name": "Accept Publicizing Request",
            "containerId": "0d9f4339-a50a-495e-a790-e998f7db5f92",
            "created": "2023-07-13T12:25:22.552Z",
            "sortNum": 180000
        },
        {
            "_id": "7df6cb1f-2243-4653-84a2-7d145ffc63d8",
            "name": "Reject Publicizing Request",
            "containerId": "0d9f4339-a50a-495e-a790-e998f7db5f92",
            "created": "2023-07-13T12:25:32.265Z",
            "sortNum": 190000
        },
        {
            "_id": "a306fdd4-7ac2-4c22-bea8-1bf0942a7b84",
            "name": "Import Problems",
            "containerId": "0d9f4339-a50a-495e-a790-e998f7db5f92",
            "created": "2023-08-03T11:43:49.884Z",
            "sortNum": 200000
        }
    ],
    "settings": {
        "auth": {
            "type": "bearer",
            "bearer": "{{bearer_token}}"
        },
        "options": {
            "baseUrl": "http://localhost:3000/graphql"
        }
    },
    "requests": [
        {
            "_id": "71642f55-4b63-417a-8f07-b466f2b65c88",
            "colId": "089b01d8-96da-497e-8921-f5df86e4d23c",
            "containerId": "50fd1447-8e48-415a-adb8-29d7d7f742cc",
            "name": "Succeed",
            "url": "",
            "method": "POST",
            "sortNum": 10000,
            "created": "2023-07-01T08:39:22.506Z",
            "modified": "2023-07-01T15:35:06.098Z",
            "headers": [],
            "params": [],
            "body": {
                "type": "graphql",
                "raw": "",
                "form": [],
                "graphql": {
                    "query": "query Group {\n  getGroups(take: 3) {\n    id\n    groupName\n    description\n    config\n    memberNum\n  }\n}"
                }
            },
            "tests": [
                {
                    "type": "res-body",
                    "custom": "",
                    "action": "contains",
                    "value": "id"
                },
                {
                    "type": "res-body",
                    "custom": "",
                    "action": "contains",
                    "value": "groupName"
                },
                {
                    "type": "res-body",
                    "custom": "",
                    "action": "contains",
                    "value": "description"
                },
                {
                    "type": "res-body",
                    "custom": "",
                    "action": "contains",
                    "value": "config"
                },
                {
                    "type": "res-body",
                    "custom": "",
                    "action": "contains",
                    "value": "memberNum"
                },
                {
                    "type": "json-query",
                    "custom": "json.data.getGroups.id | length",
                    "action": "<=",
                    "value": "3"
                }
            ],
            "docs": "# Get Groups [어드민 대시보드]\n\n모든 그룹의 목록을 가져옵니다.\n\n## Query\n\n- `cursor`: (optional) 가져올 아이템의 기준점으로, take 값에 따라 기준점의 앞뒤에 있는 아이템을 가져오게 됩니다. cursor 값은 항상 양수여야 하며, 값을 넘겨주지 않으면 자동으로 첫번째 아이템부터 반환됩니다.\n- `take`: 가져올 아이템의 개수를 지정합니다.",
            "preReq": {
                "runRequests": [
                    {
                        "reqId": "fd33c48d-00af-4dea-b600-449bef7e5bea",
                        "colId": "07dc2986-f7a6-4827-8ec2-cb288e3de5e7",
                        "triggerCondition": "run-always",
                        "triggerValue": ""
                    }
                ]
            }
        },
        {
            "_id": "05e3046e-d43c-43d2-aaf9-a2c948b41183",
            "colId": "089b01d8-96da-497e-8921-f5df86e4d23c",
            "containerId": "771ab14a-f583-4a94-a34e-4f8e8b569d8b",
            "name": "422: Duplicate Name",
            "url": "",
            "method": "POST",
            "sortNum": 20000,
            "created": "2023-07-01T09:06:26.347Z",
            "modified": "2023-07-01T09:12:06.176Z",
            "headers": [],
            "params": [],
            "body": {
                "type": "graphql",
                "raw": "",
                "form": [],
                "graphql": {
                    "query": "mutation Group {\n  createGroup(input: {\n    groupName: \"Example Group\",\n    description: \"Blah Blah\",\n    config: {\n      showOnList: true,\n      allowJoinFromSearch: true,\n      allowJoinWithURL: false,\n      requireApprovalBeforeJoin: true\n    }\n  }) {\n    id\n  }\n}"
                }
            },
            "tests": [
                {
                    "type": "json-query",
                    "custom": "json.errors[0].extensions.status",
                    "action": "equal",
                    "value": "422"
                },
                {
                    "type": "json-query",
                    "custom": "json.errors[0].message",
                    "action": "equal",
                    "value": "Group name already exists"
                }
            ],
            "preReq": {
                "runRequests": [
                    {
                        "reqId": "86d2ae24-54f0-4567-9a3c-a993ac915ad4",
                        "colId": "07dc2986-f7a6-4827-8ec2-cb288e3de5e7",
                        "triggerCondition": "run-always",
                        "triggerValue": ""
                    }
                ]
            }
        },
        {
            "_id": "d69f62f2-213f-495e-b8b7-d2904e9c434a",
            "colId": "089b01d8-96da-497e-8921-f5df86e4d23c",
            "containerId": "771ab14a-f583-4a94-a34e-4f8e8b569d8b",
            "name": "Succeed",
            "url": "",
            "method": "POST",
            "sortNum": 10000,
            "created": "2023-07-01T09:23:20.634Z",
            "modified": "2023-08-04T11:31:49.265Z",
            "headers": [],
            "params": [],
            "body": {
                "type": "graphql",
                "raw": "",
                "form": [],
                "graphql": {
                    "query": "mutation Group {\n  createGroup(input: {\n    groupName: \"New Groupaa123\",\n    description: \"Blah Blah\",\n    config: {\n      showOnList: false,\n      allowJoinFromSearch: true,\n      allowJoinWithURL: false,\n      requireApprovalBeforeJoin: true\n    }\n  }) {\n    id\n    config\n  }\n}"
                }
            },
            "tests": [
                {
                    "type": "res-body",
                    "custom": "",
                    "action": "contains",
                    "value": "id"
                }
            ],
            "docs": "# Create Group [유저 대시보드 /그룹]\n\n**⚠️ 최초 1번만 동작할 리퀘스트입니다. 다시 성공 응답을 받으려면 (1) input의 그룹명을 바꿔 리퀘스트를 전송하거나 (2) `npx prisma migrate reset`을 실행해주세요.**  \n\n새로운 그룹을 생성합니다.\n\n### Constraints\n- Manager 이상의 role을 가진 유저만 새 그룹을 생성할 수 있습니다.\n- 그룹의 이름은 다른 그룹의 이름과 같을 수 없습니다.\n- 유저에게 주어져야 하는 그룹 config의 디폴트 값은 다음과 같습니다.\n  ```json\n  showOnList: true\n  allowJoinFromSearch: true\n  allowJoinWithURL: false\n  requireApprovalBeforeJoin: true\n  ```\n  + `showOnList`가 false이면 `allowJoinFromSearch` 값이 항상 false로 적용됩니다.",
            "preReq": {
                "runRequests": [
                    {
                        "reqId": "86d2ae24-54f0-4567-9a3c-a993ac915ad4",
                        "colId": "07dc2986-f7a6-4827-8ec2-cb288e3de5e7",
                        "triggerCondition": "run-always",
                        "triggerValue": ""
                    }
                ]
            }
        },
        {
            "_id": "1448e822-f5bb-45aa-a9b0-db9ba1fbda85",
            "colId": "089b01d8-96da-497e-8921-f5df86e4d23c",
            "containerId": "e301836d-c693-4efe-a13b-59250583415f",
            "name": "Succeed",
            "url": "",
            "method": "POST",
            "sortNum": 10000,
            "created": "2023-07-01T09:28:51.000Z",
            "modified": "2023-07-01T13:32:14.311Z",
            "headers": [],
            "params": [],
            "body": {
                "type": "graphql",
                "raw": "",
                "form": [],
                "graphql": {
                    "query": "query Group {\n  getGroup(groupId: 1) {\n    id\n    groupName\n    description\n    config\n    createTime\n    memberNum\n    managers\n  }\n}"
                }
            },
            "tests": [
                {
                    "type": "res-body",
                    "custom": "",
                    "action": "contains",
                    "value": "id"
                },
                {
                    "type": "res-body",
                    "custom": "",
                    "action": "contains",
                    "value": "groupName"
                },
                {
                    "type": "res-body",
                    "custom": "",
                    "action": "contains",
                    "value": "description"
                },
                {
                    "type": "res-body",
                    "custom": "",
                    "action": "contains",
                    "value": "config"
                },
                {
                    "type": "res-body",
                    "custom": "",
                    "action": "contains",
                    "value": "createTime"
                },
                {
                    "type": "res-body",
                    "custom": "",
                    "action": "contains",
                    "value": "memberNum"
                },
                {
                    "type": "res-body",
                    "custom": "",
                    "action": "contains",
                    "value": "managers"
                }
            ],
            "docs": "# Get Group [그룹 대시보드]\n\n그룹의 상세 정보를 보여줍니다.  \n그룹이 존재하지 않거나 유저에게 그룹 관리 권한이 없는 경우 403이 반환됩니다.",
            "preReq": {
                "runRequests": [
                    {
                        "reqId": "de1639a5-d9da-4397-8a13-ae1fc61b849b",
                        "colId": "07dc2986-f7a6-4827-8ec2-cb288e3de5e7",
                        "triggerCondition": "run-always",
                        "triggerValue": ""
                    }
                ]
            }
        },
        {
            "_id": "1894da94-9c1c-4af8-8ea8-a23f8b74ed4d",
            "colId": "089b01d8-96da-497e-8921-f5df86e4d23c",
            "containerId": "2e6dd7d6-4110-4bd0-9138-660931d2a26d",
            "name": "Succeed",
            "url": "",
            "method": "POST",
            "sortNum": 2500,
            "created": "2023-07-01T09:38:06.086Z",
            "modified": "2023-07-02T07:28:39.971Z",
            "headers": [],
            "params": [],
            "body": {
                "type": "graphql",
                "raw": "",
                "form": [],
                "graphql": {
                    "query": "mutation Group {\n  updateGroup(\n    groupId: 3\n    input: {\n      groupName: \"Revised Group\",\n      description: \"Blah Blah\",\n      config: {\n        showOnList: false,\n        allowJoinFromSearch: true,\n        allowJoinWithURL: false\n        requireApprovalBeforeJoin: true\n      }\n    }\n  ) {\n    id\n    groupName\n    description\n    config\n  }\n}"
                }
            },
            "tests": [
                {
                    "type": "res-body",
                    "custom": "",
                    "action": "contains",
                    "value": "id"
                },
                {
                    "type": "res-body",
                    "custom": "",
                    "action": "contains",
                    "value": "groupName"
                },
                {
                    "type": "res-body",
                    "custom": "",
                    "action": "contains",
                    "value": "description"
                },
                {
                    "type": "res-body",
                    "custom": "",
                    "action": "contains",
                    "value": "config"
                }
            ],
            "docs": "# Update Group [그룹 대시보드]\n\n새로운 그룹을 생성합니다.\n\n### Constraints\n- 그룹의 이름은 다른 그룹의 이름과 같을 수 없습니다.\n  + c.f. 422: Duplicate Group Name\n- Open Space의 정보는 업데이트할 수 없습니다.\n- `config`의 `showOnList`가 false이면 `allowJoinFromSearch` 값이 항상 false로 적용됩니다.",
            "preReq": {
                "runRequests": [
                    {
                        "reqId": "1a62bc1b-fbff-4f01-bbb8-bbf08974ea80",
                        "colId": "07dc2986-f7a6-4827-8ec2-cb288e3de5e7",
                        "triggerCondition": "run-always",
                        "triggerValue": ""
                    }
                ]
            }
        },
        {
            "_id": "4a434dd3-41c8-410f-b6f1-e899d8c5001d",
            "colId": "089b01d8-96da-497e-8921-f5df86e4d23c",
            "containerId": "2e6dd7d6-4110-4bd0-9138-660931d2a26d",
            "name": "422: Duplicate Name",
            "url": "",
            "method": "POST",
            "sortNum": 5000,
            "created": "2023-07-01T09:38:13.195Z",
            "modified": "2023-07-01T09:44:51.817Z",
            "headers": [],
            "params": [],
            "body": {
                "type": "graphql",
                "raw": "",
                "form": [],
                "graphql": {
                    "query": "mutation Group {\n  updateGroup(\n    groupId: 2\n    input: {\n      groupName: \"Example Group\",\n      description: \"Blah Blah\",\n      config: {\n        showOnList: true,\n        allowJoinFromSearch: true,\n        allowJoinWithURL: false\n        requireApprovalBeforeJoin: true\n      }\n    }\n  ) {\n    id\n    groupName\n    description\n    config\n  }\n}"
                }
            },
            "tests": [
                {
                    "type": "json-query",
                    "custom": "json.errors[0].extensions.status",
                    "action": "equal",
                    "value": "422"
                },
                {
                    "type": "json-query",
                    "custom": "json.errors[0].message",
                    "action": "equal",
                    "value": "Group name already exists"
                }
            ],
            "preReq": {
                "runRequests": [
                    {
                        "reqId": "1a62bc1b-fbff-4f01-bbb8-bbf08974ea80",
                        "colId": "07dc2986-f7a6-4827-8ec2-cb288e3de5e7",
                        "triggerCondition": "run-always",
                        "triggerValue": ""
                    }
                ]
            }
        },
        {
            "_id": "9b958c6b-8809-462c-b451-88177295c25f",
            "colId": "089b01d8-96da-497e-8921-f5df86e4d23c",
            "containerId": "5cbf039a-6e9c-4321-93c2-e297a12b480e",
            "name": "Succeed",
            "url": "",
            "method": "POST",
            "sortNum": 30000,
            "created": "2023-07-01T09:47:35.203Z",
            "modified": "2023-07-01T13:32:37.976Z",
            "headers": [],
            "params": [],
            "body": {
                "type": "graphql",
                "raw": "",
                "form": [],
                "graphql": {
                    "query": "mutation Group {\n  deleteGroup(groupId: 4) {\n    count\n  }\n}"
                }
            },
            "tests": [],
            "docs": "# Delete Group [그룹 대시보드]\n\n**⚠️ 최초 1번만 동작할 리퀘스트입니다. 다시 성공 응답을 받으려면 `npx prisma migrate reset`을 실행해주세요.**  \n\n그룹을 삭제합니다.\n\n### Constraints\n- 그룹은 그룹의 생성자 혹은 Admin/SuperAdmin만 삭제할 수 있습니다.\n- 그룹의 관리자이더라도 그룹을 생성한 유저가 아니라면 삭제가 불가능합니다.\n- Open Space는 어떤 유저도 삭제할 수 없습니다.\n",
            "preReq": {
                "runRequests": [
                    {
                        "reqId": "86d2ae24-54f0-4567-9a3c-a993ac915ad4",
                        "colId": "07dc2986-f7a6-4827-8ec2-cb288e3de5e7",
                        "triggerCondition": "run-always",
                        "triggerValue": ""
                    }
                ]
            }
        },
        {
            "_id": "53cc571f-a6d1-4c8d-8659-d261b337933d",
            "colId": "089b01d8-96da-497e-8921-f5df86e4d23c",
            "containerId": "5cbf039a-6e9c-4321-93c2-e297a12b480e",
            "name": "403: Not Creator",
            "url": "",
            "method": "POST",
            "sortNum": 40000,
            "created": "2023-07-01T09:48:00.827Z",
            "modified": "2023-07-01T13:31:40.071Z",
            "headers": [],
            "params": [],
            "body": {
                "type": "graphql",
                "raw": "",
                "form": [],
                "graphql": {
                    "query": "mutation Group {\n  deleteGroup(groupId: 2) {\n    count\n  }\n}"
                }
            },
            "tests": [
                {
                    "type": "json-query",
                    "custom": "json.errors[0].extensions.originalError.statusCode",
                    "action": "equal",
                    "value": "403"
                },
                {
                    "type": "json-query",
                    "custom": "json.errors[0].message",
                    "action": "equal",
                    "value": "If not admin, only creator can delete a group"
                }
            ],
            "preReq": {
                "runRequests": [
                    {
                        "reqId": "de1639a5-d9da-4397-8a13-ae1fc61b849b",
                        "colId": "07dc2986-f7a6-4827-8ec2-cb288e3de5e7",
                        "triggerCondition": "run-always",
                        "triggerValue": ""
                    }
                ]
            }
        },
        {
            "_id": "d62f2e3e-7a5c-4543-8eff-bb146cabde99",
            "colId": "089b01d8-96da-497e-8921-f5df86e4d23c",
            "containerId": "5cbf039a-6e9c-4321-93c2-e297a12b480e",
            "name": "403: Protected Open Space",
            "url": "",
            "method": "POST",
            "sortNum": 35000,
            "created": "2023-07-01T13:27:34.416Z",
            "modified": "2023-07-01T15:08:53.783Z",
            "headers": [],
            "params": [],
            "body": {
                "type": "graphql",
                "raw": "",
                "form": [],
                "graphql": {
                    "query": "mutation Group {\n  deleteGroup(groupId: 1) {\n    count\n  }\n}"
                }
            },
            "tests": [
                {
                    "type": "json-query",
                    "custom": "json.errors[0].extensions.originalError.statusCode",
                    "action": "equal",
                    "value": "403"
                },
                {
                    "type": "json-query",
                    "custom": "json.errors[0].message",
                    "action": "equal",
                    "value": "Open space cannot be deleted"
                }
            ],
            "preReq": {
                "runRequests": [
                    {
                        "reqId": "1a62bc1b-fbff-4f01-bbb8-bbf08974ea80",
                        "colId": "07dc2986-f7a6-4827-8ec2-cb288e3de5e7",
                        "triggerCondition": "run-always",
                        "triggerValue": ""
                    }
                ]
            }
        },
        {
            "_id": "9631bc1c-c071-4512-9dc6-43267b8f9c78",
            "colId": "089b01d8-96da-497e-8921-f5df86e4d23c",
            "containerId": "2e6dd7d6-4110-4bd0-9138-660931d2a26d",
            "name": "403: Protected Open Space",
            "url": "",
            "method": "POST",
            "sortNum": 3750,
            "created": "2023-07-01T15:05:20.179Z",
            "modified": "2023-07-01T15:09:04.804Z",
            "headers": [],
            "params": [],
            "body": {
                "type": "graphql",
                "raw": "",
                "form": [],
                "graphql": {
                    "query": "mutation Group {\n  updateGroup(\n    groupId: 1\n    input: {\n      groupName: \"Revised Group\",\n      description: \"Blah Blah\",\n      config: {\n        showOnList: true,\n        allowJoinFromSearch: true,\n        allowJoinWithURL: false\n        requireApprovalBeforeJoin: true\n      }\n    }\n  ) {\n    id\n    groupName\n    description\n    config\n  }\n}"
                }
            },
            "tests": [
                {
                    "type": "json-query",
                    "custom": "json.errors[0].extensions.originalError.statusCode",
                    "action": "equal",
                    "value": "403"
                },
                {
                    "type": "json-query",
                    "custom": "json.errors[0].message",
                    "action": "equal",
                    "value": "Open space cannot be updated"
                }
            ],
            "preReq": {
                "runRequests": [
                    {
                        "reqId": "1a62bc1b-fbff-4f01-bbb8-bbf08974ea80",
                        "colId": "07dc2986-f7a6-4827-8ec2-cb288e3de5e7",
                        "triggerCondition": "run-always",
                        "triggerValue": ""
                    }
                ]
            }
        },
        {
            "_id": "f16ff750-8b46-4c28-b7da-a676a88009b6",
            "colId": "089b01d8-96da-497e-8921-f5df86e4d23c",
            "containerId": "6ecc2072-81d3-4785-adf3-fc04f8443178",
            "name": "Succeed",
            "url": "",
            "method": "POST",
            "sortNum": 50000,
            "created": "2023-07-13T12:00:14.545Z",
            "modified": "2023-08-10T08:48:07.653Z",
            "headers": [],
            "params": [],
            "body": {
                "type": "graphql",
                "raw": "",
                "form": [],
                "graphql": {
                    "query": "query {\n    getContests(\n            take: 6,\n            groupId: 2\n        ) {\n        id\n        createdById\n        groupId\n        title\n    }\n}"
                }
            },
            "tests": [],
            "docs": "# Get Contests\n현재 존재하는 Contest의 정보를 불러옵니다.\n\n**Query**\n\n- ```take```: 불러올 Contest의 개수를 지정합니다.\n- ```cursor```: (optional) 가져올 아이템의 기준점입니다. ```cursor```를 기준으로 ```take``` 만큼의 아이템을 가져옵니다. 따로 지정하지 않으면 첫 번째 아이템부터 가져옵니다.\n- ```groupId```: Contest를 불러올 그룹의 id를 지정합니다."
        },
        {
            "_id": "202a2696-fa13-40b6-9fa8-1fa4e94c0c83",
            "colId": "089b01d8-96da-497e-8921-f5df86e4d23c",
            "containerId": "14096886-1667-4723-a496-c3d5127a4a95",
            "name": "Succeed",
            "url": "",
            "method": "POST",
            "sortNum": 60000,
            "created": "2023-07-13T12:07:19.048Z",
            "modified": "2023-08-10T08:53:21.606Z",
            "headers": [],
            "params": [],
            "body": {
                "type": "graphql",
                "raw": "",
                "form": [],
                "graphql": {
                    "query": "mutation Contest {\n    createContest(\n        groupId: 2,\n        input: {\n            title: \"import\",\n            description: \"description1\",\n            startTime: \"2023-08-05\",\n            endTime: \"2023-08-10\",\n            config: {\n                isVisible: true,\n                isRankVisible: false\n            }\n        }\n    ) {\n        title\n        description\n        createTime\n    }\n}"
                }
            },
            "tests": [],
            "docs": "# Create Contest\n새로운 Contest를 생성합니다.\n\n**Query**\n- ```groupId```: 새로운 Contest를 생성하고자 하는 Group의 id입니다.\n- ```input```: 새로운 Contest를 생성하기 위한 정보입니다."
        },
        {
            "_id": "7c113c1d-2b10-42f5-8aa8-ff38ba8b4ea9",
            "colId": "089b01d8-96da-497e-8921-f5df86e4d23c",
            "containerId": "3023a28d-732b-48f7-999d-e1d620456602",
            "name": "Succeed",
            "url": "",
            "method": "POST",
            "sortNum": 70000,
            "created": "2023-07-13T12:11:23.763Z",
            "modified": "2023-08-10T08:55:46.596Z",
            "headers": [],
            "params": [],
            "body": {
                "type": "graphql",
                "raw": "",
                "form": [],
                "graphql": {
                    "query": "mutation {\n    updateContest(\n    groupId: 1,\n    input: {\n        id: 7,\n        title: \"updated title 7\",\n        description: \"updated description 1\",\n        startTime: \"2023-08-01\",\n        endTime: \"2023-08-30\",\n        config: {\n            isVisible: false,\n            isRankVisible: false\n        }\n    }) {\n        id\n        createdById\n        groupId\n        title\n    }\n}"
                }
            },
            "tests": [],
            "docs": "# Update Contest\n존재하는 Contest의 정보를 수정합니다.\nContest가 존재하지 않는 경우 422가 반환됩니다.\n\n**Query**\n- ```groupId```: 수정하고자 하는 Contest가 속해있는 Group의 id입니다.\n- ```input```: Contest의 수정 내용입니다."
        },
        {
            "_id": "b94f11a6-e1a7-40c2-906b-a6b160dfe224",
            "colId": "089b01d8-96da-497e-8921-f5df86e4d23c",
            "containerId": "ce343dbe-8fd1-41ea-9c0a-323265757482",
            "name": "Succeed",
            "url": "",
            "method": "POST",
            "sortNum": 80000,
            "created": "2023-07-13T12:16:41.898Z",
            "modified": "2023-08-10T08:56:41.887Z",
            "headers": [],
            "params": [],
            "body": {
                "type": "graphql",
                "raw": "",
                "form": [],
                "graphql": {
                    "query": "mutation {\n    deleteContest(\n    groupId: 1,\n    contestId: 7\n    ) {\n        id\n        createdById\n        groupId\n        title\n    }\n}"
                }
            },
            "tests": [],
            "docs": "# Delete Contest\nContest를 삭제합니다.\n\n**Query**\n- ```groupId```: 삭제하고자 하는 Contest가 속해 있는 Group의 id입니다.\n- ```contestId```: 삭제하고자 하는 Contest의 id입니다."
        },
        {
            "_id": "f7e06eda-8cc0-4462-ab28-221cc4dd3d59",
            "colId": "089b01d8-96da-497e-8921-f5df86e4d23c",
            "containerId": "33e66082-5553-4ef8-901d-c26bd4f50775",
            "name": "Succeed",
            "url": "",
            "method": "POST",
            "sortNum": 100000,
            "created": "2023-07-13T12:25:57.565Z",
            "modified": "2023-08-10T09:09:18.095Z",
            "headers": [],
            "params": [],
            "body": {
                "type": "graphql",
                "raw": "",
                "form": [],
                "graphql": {
                    "query": "mutation {\n    createPublicizingRequest(\n    groupId: 2,\n    contestId: 5\n    ) {\n        contestId,\n        userId\n        expireTime\n    }\n}"
                }
            },
            "tests": [],
            "docs": "# Create Publicizing Request\n새로운 Publicizing Request를 생성합니다.\n\n이미 Contest가 Open Space에 존재하면 400이 반환됩니다.\n\n존재하지 않는 Contest인 경우 404가 반환됩니다.\n\n**Query**\n- ```groupId```: Publicizing Request를 수행할 Contest가 속해있는 Group의 id입니다.\n- ```contestId```: Publicizing Request를 수행할 Contest의 id입니다."
        },
        {
            "_id": "9327c6fd-e4ef-4150-b999-9dbdc9d47a59",
            "colId": "089b01d8-96da-497e-8921-f5df86e4d23c",
            "containerId": "9fc6bef0-ed6d-43a6-a09c-652fdd0074c0",
            "name": "Succeed",
            "url": "",
            "method": "POST",
            "sortNum": 110000,
            "created": "2023-07-13T12:50:23.837Z",
            "modified": "2023-08-12T08:09:13.116Z",
            "headers": [],
            "params": [],
            "body": {
                "type": "graphql",
                "raw": "",
                "form": [],
                "graphql": {
                    "query": "mutation Problem($input: UpdateProblemInput!){\n    updateProblem(\n        groupId: 1\n        input: $input\n    ){\n        id\n        title\n    }\n}",
                    "variables": "{\n  \"input\":{\n    \"id\": 1,\n    \"title\": \"title0\",\n    \"languages\": [\"C\"],\n    \"tags\":{\n      \"create\":[1],\n      \"delete\":[]\n    }\n    }\n}"
                }
            },
            "tests": [
                {
                    "type": "res-body",
                    "custom": "",
                    "action": "contains",
                    "value": "\"statusCode\": 422"
                },
                {
                    "type": "res-body",
                    "custom": "",
                    "action": "contains",
                    "value": "\"message\": \"A problem should support at least one language\""
                }
            ],
            "docs": "# Update Problem\n\n문제를 수정합니다.  \n그룹이 존재하지 않거나 유저에게 그룹 관리 권한이 없는 경우 403이 반환됩니다.  \n\n### Query\n- `groupId`를 설정하지 않으면 Open Space로 인식합니다.\n- 테스트케이스는 수정할 테이스케이스만 `testcases` 배열에 담아주세요.\n  + 기존에 있던 테이스케이스의 내용을 수정하려면, `id`, `input`, `output`, `scoreWeight`를 필드로 갖는 아이템을 배열에 넣어야 합니다. 존재하지 않는 테스트케이스 ID가 `id`로 설정되어 있을 경우, 새로운 테스트케이스로 간주됩니다.\n  + 새로운 테스트케이스를 추가하려면, 아이템이 `id`는 제외하고 나머지만을 필드로 갖도록 합니다.\n  + 수정하지 않을 테스트케이스는 전송하지 말아주세요.\n- `tags`를 통해 기존 tag를 연결해 problemTag를 생성하거나, 존재하던 problemTag를 삭제할 수 있습니다.\n\n\n### Constraints\n- 현재 시스템에서 지원하는 언어는 C, Cpp, Java, Python3뿐입니다.\n- 아래의 세 가지 제약 조건을 어길 시 422가 반환됩니다:\n- `languages`는 빈 배열일 수 없습니다(= 아무 언어도 지원하지 않는 문제는 만들 수 없습니다).\n- `template`의 기반 언어는 `languages`에 속해 있어야 합니다.\n- `tags`의 자료형은 `[UpdateProblemTagInput]`이며 `id`와 `action`으로 구성됩니다.\n   +  `id`은 number로, 새로 생성하거나 지울 problemTag를 지정합니다.\n         - `Create`시에는 연결할 `tag`의 `id` 기술\n         - `Delete`시에는 삭제할 `problemTag`의 `id` 기술\n   +  `action`은 `String(enum)`으로, `Create`와 `Delete` 두개의 값만 가질 수 있습니다.\n",
            "preReq": {
                "runRequests": [
                    {
                        "reqId": "fd33c48d-00af-4dea-b600-449bef7e5bea",
                        "colId": "07dc2986-f7a6-4827-8ec2-cb288e3de5e7",
                        "triggerCondition": "run-always",
                        "triggerValue": ""
                    }
                ]
            }
        },
        {
            "_id": "d20e6466-3923-4d8e-a7b0-1274bff52bac",
            "colId": "089b01d8-96da-497e-8921-f5df86e4d23c",
            "containerId": "6920af5c-ce95-4485-b9a8-5eb56312fddb",
            "name": "Succeed",
            "url": "",
            "method": "POST",
            "sortNum": 120000,
            "created": "2023-07-31T19:29:28.071Z",
            "modified": "2023-08-10T10:35:08.936Z",
            "headers": [],
            "params": [],
            "body": {
                "type": "graphql",
                "raw": "",
                "form": [],
                "graphql": {
                    "query": "mutation Problem($input: UpdateProblemInput!){\n    updateProblem(\n        groupId: 1\n        input: $input\n    ){\n        id\n        title\n    }\n}",
                    "variables": "{\n  \"input\":{\n    \"id\": 1,\n    \"title\": \"title0\",\n    \"languages\": [],\n    \"tags\": []\n  }\n}"
                }
            },
            "tests": [],
            "docs": "# Accept Publicizing Request\nPublicizing Request를 승인합니다.\n\nContest가 존재하지 않는 경우, Publicizing Request가 존재하지 않는 경우 404가 반환됩니다.\n\n\n**Query**\n- ```contestId```: Publicizing Request를 승인할 Contest의 id입니다."
        },
        {
            "_id": "974f9b3f-5625-49fd-a967-77d240685a95",
            "colId": "089b01d8-96da-497e-8921-f5df86e4d23c",
            "containerId": "7df6cb1f-2243-4653-84a2-7d145ffc63d8",
            "name": "Succeed",
            "url": "",
            "method": "POST",
            "sortNum": 130000,
            "created": "2023-07-31T19:29:30.308Z",
            "modified": "2023-08-10T10:35:05.257Z",
            "headers": [],
            "params": [],
            "body": {
                "type": "graphql",
                "raw": "",
                "form": [],
                "graphql": {
                    "query": "mutation Problem($input: UpdateProblemInput!){\n    updateProblem(\n        groupId: 1\n        input: $input\n    ){\n        id\n        title\n    }\n}",
                    "variables": "{\n  \"input\":{\n    \"id\": 1,\n    \"title\": \"title0\",\n    \"languages\": [\"C\",\"Java\"],\n    \"template\": [{\n      \"language\": \"Python3\",\n      \"code\": [{\n        \"id\": 1,\n        \"text\": \"int main(void) {}\",\n        \"locked\": false\n      }]\n    }],\n    \"tags\": []\n  }\n}"
                }
            },
            "tests": [],
            "docs": "# Reject Publicizing Request\nPublicizing Request를 거부합니다.\n\nContest가 존재하지 않는 경우, Publicizing Request가 존재하지 않는 경우 404가 반환됩니다.\n\n**Query**\n- ```contestId```: Publicizing Request를 거부할 Contest의 id입니다."
        },
        {
            "_id": "67f924a1-b028-46be-9ea6-543dcfc63041",
            "colId": "089b01d8-96da-497e-8921-f5df86e4d23c",
            "containerId": "a306fdd4-7ac2-4c22-bea8-1bf0942a7b84",
            "name": "Succeed",
            "url": "",
            "method": "POST",
            "sortNum": 140000,
            "created": "2023-07-31T19:29:32.585Z",
            "modified": "2023-08-10T10:35:01.029Z",
            "headers": [],
            "params": [],
            "body": {
                "type": "graphql",
                "raw": "",
                "form": [],
                "graphql": {
                    "query": "mutation Problem($input: UpdateProblemInput!){\n    updateProblem(\n        groupId: 1\n        input: $input\n    ){\n        id\n        title\n    }\n}",
                    "variables": "{\n  \"input\":{\n    \"id\": 1,\n    \"title\": \"title0\",\n    \"languages\": [\"C\",\"Java\"],\n    \"tags\": [0]\n  }\n}"
                }
            },
            "tests": [],
            "docs": "# Import Problems\nGroup이 소유하고 있는 Problem을 Contest로 import합니다.\n\nContest가 존재하지 않는 경우, Problem이 존재하지 않는 경우 404를 반환합니다.\n\nContest가 Group 소유가 아닌 경우 400을 반환합니다.\n\nProblem이 Group 소유가 아닌경우 그 Problem은 import에서 제외됩니다.\n\n**Query**\n- ```groupId```: Contest를 소유하고 있는 Group의 id입니다.\n- ```contestId```: Problem을 import할 Contest의 id입니다.\n- ```problemIds```: import될 Problem들의 id 배열입니다."
        }
    ]
}
