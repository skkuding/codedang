generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int              @id @default(autoincrement())
  username              String           @unique
  password              String
  email                 String           @unique
  hasEmailAuthenticated Boolean          @default(false) @map("has_email_authenticated")
  lastLogin             DateTime         @map("last_login")
  createTime            DateTime         @default(now()) @map("create_time")
  updateTime            DateTime         @updatedAt @map("update_time")
  role                  Role             @default(User)
  Contest               Contest[]
  ContestRankACM        ContestRankACM[]
  ContestRecord         ContestRecord[]
  Group                 Group[]
  Notice                Notice[]
  Problem               Problem[]
  Submission            Submission[]
  UserGroup             UserGroup[]
  UserProfile           UserProfile?
  Workbook              Workbook[]

  @@map("user")
}

model UserProfile {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique @map("user_id")
  realName   String?  @map("real_name")
  major      String?
  createTime DateTime @default(now()) @map("create_time")
  updateTime DateTime @updatedAt @map("update_time")
  user       User     @relation(fields: [userId], references: [id])

  @@map("user_profile")
}

model UserGroup {
  id             Int      @id @default(autoincrement())
  userId         Int      @map("user_id")
  groupId        Int      @map("group_id")
  isRegistered   Boolean  @default(false) @map("is_registered")
  isGroupManager Boolean  @default(false) @map("is_group_manager")
  createTime     DateTime @default(now()) @map("create_time")
  updateTime     DateTime @updatedAt @map("update_time")
  group          Group    @relation(fields: [groupId], references: [id])
  user           User     @relation(fields: [userId], references: [id])

  @@map("user_group")
}

model Group {
  id             Int            @id @default(autoincrement())
  createdBy      User           @relation(fields: [createdById], references: [id], onDelete: SetNull)
  createdById    Int            @map("created_by_id")
  groupName      String         @unique @map("group_name")
  private        Boolean        @default(false)
  // 생성시 자동 발급
  invitationCode String         @map("invitation_code")
  description    String
  createTime     DateTime       @default(now()) @map("create_time")
  updateTime     DateTime       @updatedAt @map("update_time")
  Contest        Contest[]
  group_notice   group_notice[] @relation("groupTogroup_notice")
  Problem        Problem[]
  UserGroup      UserGroup[]
  Workbook       Workbook[]

  @@map("group")
}

model Notice {
  id           Int            @id @default(autoincrement())
  createdById  Int            @map("created_by_id")
  content      String
  visible      Boolean        @default(true)
  top_fixed    Boolean        @default(false)
  createTime   DateTime       @default(now()) @map("create_time")
  updateTime   DateTime       @updatedAt @map("update_time")
  createdBy    User           @relation(fields: [createdById], references: [id], onDelete: SetNull)
  group_notice group_notice[] @relation("group_noticeTonotice")

  @@map("notice")
}

model Problem {
  id                Int               @id @default(autoincrement())
  createdById       Int               @map("created_by_id")
  groupId           Int               @map("group_id")
  title             String
  description       String
  inputDescription  String            @map("input_description")
  outputDescription String            @map("output_description")
  hint              String
  languages         Json
  timeLimit         Int               @map("time_limit")
  memoryLimit       Int               @map("memory_limit")
  difficulty        String
  source            Json
  shared            Boolean           @default(false)
  submissionNum     Int               @default(0) @map("submission_num")
  acceptedNum       Int               @default(0) @map("accepted_num")
  score             Int               @default(0)
  createTime        DateTime          @default(now()) @map("create_time")
  updateTime        DateTime          @updatedAt @map("update_time")
  createdBy         User              @relation(fields: [createdById], references: [id], onDelete: SetNull)
  group             Group             @relation(fields: [groupId], references: [id])
  ContestProblem    ContestProblem[]
  ProblemTag        ProblemTag[]
  ProblemTestcase   ProblemTestcase[]
  Submission        Submission[]
  WorkbookProblem   WorkbookProblem[]

  @@map("problem")
}

model ProblemTestcase {
  id         Int      @id @default(autoincrement())
  problemId  Int      @map("problem_id")
  input      String
  output     String
  score      Int      @default(0)
  createTime DateTime @default(now()) @map("create_time")
  updateTime DateTime @updatedAt @map("update_time")
  problem    Problem  @relation(fields: [problemId], references: [id])

  @@map("problem_testcase")
}

model ProblemTag {
  id        Int     @id @default(autoincrement())
  problemId Int     @map("problem_id")
  tagId     Int     @map("tag_id")
  problem   Problem @relation(fields: [problemId], references: [id])
  tag       Tag     @relation(fields: [tagId], references: [id])

  @@map("problem_tag")
}

model Tag {
  id         Int          @id @default(autoincrement())
  name       String
  type       String
  visible    Boolean      @default(true)
  createTime DateTime     @default(now()) @map("create_time")
  updateTime DateTime     @updatedAt @map("update_time")
  ProblemTag ProblemTag[]

  @@map("tag")
}

model Contest {
  id                 Int              @id @default(autoincrement())
  createdById        Int              @map("created_by_id")
  groupId            Int              @map("group_id")
  title              String
  description        String
  startTime          DateTime         @map("start_time")
  endTime            DateTime         @map("end_time")
  visible            Boolean          @default(true)
  isRankVisible      Boolean          @default(true) @map("is_rank_visible")
  createTime         DateTime         @default(now()) @map("create_time")
  updateTime         DateTime         @updatedAt @map("update_time")
  type               ContestType
  descriptionSummary String           @map("description_summary") @db.VarChar(1200)
  createdBy          User             @relation(fields: [createdById], references: [id], onDelete: SetNull)
  group              Group            @relation(fields: [groupId], references: [id])
  ContestNotice      ContestNotice[]
  ContestProblem     ContestProblem[]
  ContestRankACM     ContestRankACM[]
  ContestRecord      ContestRecord[]
  Submission         Submission[]

  @@map("contest")
}

model ContestNotice {
  id          Int      @id @default(autoincrement())
  contestId   Int      @map("contest_id")
  title       String
  description String
  problemId   String   @map("problem_id")
  createTime  DateTime @default(now()) @map("create_time")
  updateTime  DateTime @updatedAt @map("update_time")
  contest     Contest  @relation(fields: [contestId], references: [id])

  @@map("contest_notice")
}

model ContestProblem {
  id         Int      @id @default(autoincrement())
  contestId  Int      @map("contest_id")
  problemId  Int      @map("problem_id")
  score      Int      @default(0)
  createTime DateTime @default(now()) @map("create_time")
  updateTime DateTime @updatedAt @map("update_time")
  contest    Contest  @relation(fields: [contestId], references: [id])
  problem    Problem  @relation(fields: [problemId], references: [id])

  @@map("contest_problem")
}

model ContestRecord {
  id         Int      @id @default(autoincrement())
  contestId  Int      @map("contest_id")
  userId     Int      @map("user_id")
  rank       Int
  createTime DateTime @default(now()) @map("create_time")
  updateTime DateTime @updatedAt @map("update_time")
  contest    Contest  @relation(fields: [contestId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@map("contest_record")
}

model ContestRankACM {
  id                 Int      @id @default(autoincrement())
  contestId          Int      @map("contest_id")
  userId             Int      @map("user_id")
  acceptedProblemNum Int      @default(0) @map("accepted_problem_num")
  totalPenalty       Int      @default(0) @map("total_penalty")
  submissionInfo     Json?    @map("submission_info")
  createTime         DateTime @default(now()) @map("create_time")
  updateTime         DateTime @updatedAt @map("update_time")
  contest            Contest  @relation(fields: [contestId], references: [id])
  user               User     @relation(fields: [userId], references: [id])

  @@map("contest_rank_acm")
}

model Workbook {
  id              Int               @id @default(autoincrement())
  createdById     Int               @map("created_by_id")
  groupId         Int               @map("group_id")
  title           String
  description     String
  startTime       DateTime          @map("start_time")
  endTime         DateTime          @map("end_time")
  visible         Boolean           @default(true)
  createTime      DateTime          @default(now()) @map("create_time")
  updateTime      DateTime          @updatedAt @map("update_time")
  createdBy       User              @relation(fields: [createdById], references: [id], onDelete: SetNull)
  group           Group             @relation(fields: [groupId], references: [id])
  Submission      Submission[]
  WorkbookProblem WorkbookProblem[]

  @@map("workbook")
}

model WorkbookProblem {
  id         Int      @id @default(autoincrement())
  workbookId Int      @map("workbook_id")
  problemId  Int      @map("problem_id")
  score      Int      @default(0)
  createTime DateTime @default(now()) @map("create_time")
  updateTime DateTime @updatedAt @map("update_time")
  problem    Problem  @relation(fields: [problemId], references: [id])
  workbook   Workbook @relation(fields: [workbookId], references: [id])

  @@map("workbook_problem")
}

model Submission {
  id               Int                @id @default(autoincrement())
  userId           Int                @map("user_id")
  problemId        Int                @map("problem_id")
  contestId        Int?               @map("contest_id")
  workbookId       Int?               @map("workbook_id")
  code             String
  language         String
  shared           Boolean            @default(false)
  ipAddr           String             @map("ip_addr")
  createTime       DateTime           @default(now()) @map("create_time")
  updateTime       DateTime           @updatedAt @map("update_time")
  contest          Contest?           @relation(fields: [contestId], references: [id])
  problem          Problem            @relation(fields: [problemId], references: [id])
  user             User               @relation(fields: [userId], references: [id])
  workbook         Workbook?          @relation(fields: [workbookId], references: [id])
  SubmissionResult SubmissionResult[]

  @@map("submission")
}

model SubmissionResult {
  id           Int        @id @default(autoincrement())
  submissionId Int        @map("submission_id")
  result       String
  acceptedNum  Int        @map("accepted_num")
  totalScore   Int        @map("total_score")
  createTime   DateTime   @default(now()) @map("create_time")
  updateTime   DateTime   @updatedAt @map("update_time")
  submission   Submission @relation(fields: [submissionId], references: [id])

  @@map("submssion_result")
}

model group_notice {
  id        Int    @id @default(autoincrement())
  group_id  Int
  notice_id Int
  group     Group  @relation("groupTogroup_notice", fields: [group_id], references: [id])
  notice    Notice @relation("group_noticeTonotice", fields: [notice_id], references: [id])
}

enum Role {
  User
  GroupAdmin
  SuperManager
  SuperAdmin
}

enum ContestType {
  ACM
  TotalScore
  ProblemBank
}
