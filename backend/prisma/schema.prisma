// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator graphql {
  provider           = "prisma-nestjs-graphql"
  output             = "../apps/admin/src/@generated"
  noAtomicOperations = true
  purgeOutput        = true
  reExport           = All
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  User
  Manager
  Admin
  SuperAdmin
}

model User {
  id         Int       @id @default(autoincrement())
  username   String    @unique
  password   String
  role       Role      @default(User)
  email      String    @unique
  lastLogin  DateTime? @map("last_login")
  createTime DateTime  @default(now()) @map("create_time")
  updateTime DateTime  @updatedAt @map("update_time")

  userProfile   UserProfile?
  userGroup     UserGroup[]
  group         Group[]
  notice        Notice[]
  problem       Problem[]
  contest       Contest[]
  contestRecord ContestRecord[]
  workbook      Workbook[]
  submission    Submission[]

  @@map("user")
}

model UserProfile {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int      @unique @map("user_id")
  realName   String   @map("real_name")
  createTime DateTime @default(now()) @map("create_time")
  updateTime DateTime @updatedAt @map("update_time")

  @@map("user_profile")
}

model UserGroup {
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int      @map("user_id")
  group         Group    @relation(fields: [groupId], references: [id])
  groupId       Int      @map("group_id")
  isGroupLeader Boolean  @default(false) @map("is_group_leader")
  createTime    DateTime @default(now()) @map("create_time")
  updateTime    DateTime @updatedAt @map("update_time")

  @@id([userId, groupId])
  @@map("user_group")
}

model Group {
  id          Int      @id @default(autoincrement())
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Restrict)
  createdById Int      @map("created_by_id")
  groupName   String   @unique @map("group_name")
  description String
  /// config default value
  /// {
  ///   "showOnList": true,          // show on 'all groups' list
  ///   "allowJoinFromSearch": true, // can join from 'all groups' list. set to false if `showOnList` is false
  ///   "allowJoinWithURL": false,
  ///   "requireApprovalBeforeJoin": true
  /// }
  config      Json
  createTime  DateTime @default(now()) @map("create_time")
  updateTime  DateTime @updatedAt @map("update_time")

  userGroup UserGroup[]
  notice    Notice[]
  problem   Problem[]
  contest   Contest[]
  workbook  Workbook[]

  @@map("group")
}

model Notice {
  id          Int      @id @default(autoincrement())
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Restrict)
  createdById Int      @map("created_by_id")
  group       Group    @relation(fields: [groupId], references: [id])
  groupId     Int      @map("group_id")
  title       String
  content     String
  isVisible   Boolean  @default(true) @map("is_visible")
  isFixed     Boolean  @default(false) @map("is_fixed")
  createTime  DateTime @default(now()) @map("create_time")
  updateTime  DateTime @updatedAt @map("update_time")

  @@map("notice")
}

model Problem {
  id                Int        @id @default(autoincrement())
  createdBy         User       @relation(fields: [createdById], references: [id], onDelete: Restrict)
  createdById       Int        @map("created_by_id")
  group             Group      @relation(fields: [groupId], references: [id])
  groupId           Int        @map("group_id")
  title             String
  description       String
  inputDescription  String     @map("input_description")
  outputDescription String     @map("output_description")
  hint              String
  languages         Language[]
  timeLimit         Int        @map("time_limit") // unit: MilliSeconds
  memoryLimit       Int        @map("memory_limit") // unit: MegaBytes
  difficulty        Level
  source            String
  createTime        DateTime   @default(now()) @map("create_time")
  updateTime        DateTime   @updatedAt @map("update_time")
  inputExamples     String[]   @map("input_examples")
  outputExamples    String[]   @map("output_examples")

  problemTestcase ProblemTestcase[]
  problemTag      ProblemTag[]
  contestProblem  ContestProblem[]
  workbookProblem WorkbookProblem[]
  submission      Submission[]

  @@map("problem")
}

enum Level {
  Level1
  Level2
  Level3
}

enum Language {
  C
  Cpp
  Java
  Python3
}

model ProblemTestcase {
  id          Int      @id @default(autoincrement())
  problem     Problem  @relation(fields: [problemId], references: [id])
  problemId   Int      @map("problem_id")
  input       String // url to corresponding file
  output      String
  scoreWeight Int      @default(1) @map("score_weight")
  createTime  DateTime @default(now()) @map("create_time")
  updateTime  DateTime @updatedAt @map("update_time")

  submissionResult SubmissionResult[]

  @@map("problem_testcase")
}

model ProblemTag {
  id        Int     @id @default(autoincrement())
  problem   Problem @relation(fields: [problemId], references: [id])
  problemId Int     @map("problem_id")
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     Int     @map("tag_id")

  @@map("problem_tag")
}

model Tag {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  createTime DateTime @default(now()) @map("create_time")
  updateTime DateTime @updatedAt @map("update_time")

  problemTag ProblemTag[]

  @@map("tag")
}

model Contest {
  id          Int      @id @default(autoincrement())
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Restrict)
  createdById Int      @map("created_by_id")
  group       Group    @relation(fields: [groupId], references: [id])
  groupId     Int      @map("group_id")
  title       String
  description String
  startTime   DateTime @map("start_time")
  endTime     DateTime @map("end_time")
  /// config default value
  /// {
  ///   "isVisible": true,
  ///   "isRankVisible": true
  /// }
  config      Json
  createTime  DateTime @default(now()) @map("create_time")
  updateTime  DateTime @updatedAt @map("update_time")

  contestProblem ContestProblem[]
  contestRecord  ContestRecord[]
  submission     Submission[]

  @@map("contest")
}

model ContestProblem {
  id         String
  contest    Contest  @relation(fields: [contestId], references: [id])
  contestId  Int      @map("contest_id")
  problem    Problem  @relation(fields: [problemId], references: [id])
  problemId  Int      @map("problem_id")
  score      Int      @default(0)
  createTime DateTime @default(now()) @map("create_time")
  updateTime DateTime @updatedAt @map("update_time")

  clarification Clarification[]

  @@id([contestId, problemId])
  @@unique([contestId, id])
  @@map("contest_problem")
}

model Clarification {
  id         Int            @id @default(autoincrement())
  problem    ContestProblem @relation(fields: [contestId, problemId], references: [contestId, problemId], onDelete: Cascade)
  contestId  Int            @map("contest_id")
  problemId  Int            @map("problem_id")
  content    String
  createTime DateTime       @default(now()) @map("create_time")
  updateTime DateTime       @updatedAt @map("update_time")

  @@map("contest_notice")
}

model ContestRecord {
  id                 Int      @id @default(autoincrement())
  contest            Contest  @relation(fields: [contestId], references: [id])
  contestId          Int      @map("contest_id")
  user               User     @relation(fields: [userId], references: [id])
  userId             Int      @map("user_id")
  acceptedProblemNum Int      @default(0) @map("accepted_problem_num")
  totalPenalty       Int      @default(0) @map("total_penalty")
  createTime         DateTime @default(now()) @map("create_time")
  updateTime         DateTime @updatedAt @map("update_time")

  @@map("contest_record")
}

model Workbook {
  id          Int      @id @default(autoincrement())
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Restrict)
  createdById Int      @map("created_by_id")
  group       Group    @relation(fields: [groupId], references: [id])
  groupId     Int      @map("group_id")
  title       String
  description String
  isVisible   Boolean  @default(true) @map("is_visible")
  createTime  DateTime @default(now()) @map("create_time")
  updateTime  DateTime @updatedAt @map("update_time")

  workbookProblem WorkbookProblem[]
  submission      Submission[]

  @@map("workbook")
}

model WorkbookProblem {
  id         String
  workbook   Workbook @relation(fields: [workbookId], references: [id])
  workbookId Int      @map("workbook_id")
  problem    Problem  @relation(fields: [problemId], references: [id])
  problemId  Int      @map("problem_id")
  createTime DateTime @default(now()) @map("create_time")
  updateTime DateTime @updatedAt @map("update_time")

  @@id([workbookId, problemId])
  @@unique([workbookId, id])
  @@map("workbook_problem")
}

model Submission {
  id         String    @id // 6 digit hex hash
  user       User      @relation(fields: [userId], references: [id])
  userId     Int       @map("user_id")
  problem    Problem   @relation(fields: [problemId], references: [id])
  problemId  Int       @map("problem_id")
  contest    Contest?  @relation(fields: [contestId], references: [id])
  contestId  Int?      @map("contest_id")
  workbook   Workbook? @relation(fields: [workbookId], references: [id])
  workbookId Int?      @map("workbook_id")
  code       String
  language   Language
  createTime DateTime  @default(now()) @map("create_time")
  updateTime DateTime  @updatedAt @map("update_time")

  submissionResult SubmissionResult[]

  @@map("submission")
}

model SubmissionResult {
  id                Int             @id @default(autoincrement())
  submission        Submission      @relation(fields: [submissionId], references: [id])
  submissionId      String          @map("submission_id")
  problemTestcase   ProblemTestcase @relation(fields: [problemTestcaseId], references: [id])
  problemTestcaseId Int             @map("problem_test_case_id")
  result            ResultStatus
  createTime        DateTime        @default(now()) @map("create_time")
  updateTime        DateTime        @updatedAt @map("update_time")

  @@map("submssion_result")
}

enum ResultStatus {
  Accepted
  WrongAnswer
  CompileError
  RuntimeError
  TimeLimitExceeded
  MemoryLimitExceeded
  OutputLimitExceeded
}
