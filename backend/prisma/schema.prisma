generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  User
  GroupAdmin
  SuperManager
  SuperAdmin
}

model User {
  id                      Int              @id @default(autoincrement())
  username                String           @unique
  password                String
  role                    Role             @default(User)
  email                   String           @unique
  has_email_authenticated Boolean          @default(false)
  last_login              DateTime
  create_time             DateTime         @default(now())
  update_time             DateTime         @updatedAt
  Contest                 Contest[]
  ContestRankACM          ContestRankACM[]
  ContestRecord           ContestRecord[]
  Group                   Group[]
  Notice                  Notice[]
  Problem                 Problem[]
  Submission              Submission[]
  UserGroup               UserGroup[]
  UserProfile             UserProfile?
  Workbook                Workbook[]

  @@map("user")
}

model UserProfile {
  id          Int      @id @default(autoincrement())
  user_id     Int      @unique
  real_name   String?
  major       String?
  create_time DateTime @default(now())
  update_time DateTime @updatedAt
  user        User     @relation(fields: [user_id], references: [id])

  @@map("user_profile")
}

model UserGroup {
  id               Int      @id @default(autoincrement())
  user_id          Int
  group_id         Int
  is_registered    Boolean  @default(false)
  is_group_manager Boolean  @default(false)
  create_time      DateTime @default(now())
  update_time      DateTime @updatedAt
  group            Group    @relation(fields: [group_id], references: [id])
  user             User     @relation(fields: [user_id], references: [id])

  @@map("user_group")
}

model Group {
  id              Int           @id @default(autoincrement())
  created_by_id   Int
  group_name      String
  private         Boolean       @default(false)
  invitation_code String
  description     String
  create_time     DateTime      @default(now())
  update_time     DateTime      @updatedAt
  created_by      User          @relation(fields: [created_by_id], references: [id], onDelete: SetNull)
  Contest         Contest[]
  GroupNotice     GroupNotice[]
  Problem         Problem[]
  UserGroup       UserGroup[]
  Workbook        Workbook[]

  @@map("group")
}

model GroupNotice {
  id        Int    @id @default(autoincrement())
  group_id  Int
  notice_id Int
  group     Group  @relation(fields: [group_id], references: [id])
  notice    Notice @relation(fields: [notice_id], references: [id])

  @@map("group_notice")
}

model Notice {
  id            Int           @id @default(autoincrement())
  created_by_id Int
  content       String
  visible       Boolean       @default(true)
  top_fixed     Boolean       @default(false)
  create_time   DateTime      @default(now())
  update_time   DateTime      @updatedAt
  created_by    User          @relation(fields: [created_by_id], references: [id], onDelete: SetNull)
  GroupNotice   GroupNotice[]

  @@map("notice")
}

model Problem {
  id                 Int               @id @default(autoincrement())
  created_by_id      Int
  group_id           Int
  title              String
  description        String
  input_description  String
  output_description String
  hint               String
  languages          Json
  time_limit         Int
  memory_limit       Int
  difficulty         String
  source             Json
  shared             Boolean           @default(false)
  submission_num     Int               @default(0)
  accepted_num       Int               @default(0)
  score              Int               @default(0)
  create_time        DateTime          @default(now())
  update_time        DateTime          @updatedAt
  created_by         User              @relation(fields: [created_by_id], references: [id], onDelete: SetNull)
  group              Group             @relation(fields: [group_id], references: [id])
  ContestProblem     ContestProblem[]
  ProblemTag         ProblemTag[]
  ProblemTestcase    ProblemTestcase[]
  Submission         Submission[]
  WorkbookProblem    WorkbookProblem[]

  @@map("problem")
}

model ProblemTestcase {
  id          Int      @id @default(autoincrement())
  problem_id  Int
  input       String
  output      String
  score       Int      @default(0)
  create_time DateTime @default(now())
  update_time DateTime @updatedAt
  problem     Problem  @relation(fields: [problem_id], references: [id])

  @@map("problem_testcase")
}

model ProblemTag {
  id         Int     @id @default(autoincrement())
  problem_id Int
  tag_id     Int
  problem    Problem @relation(fields: [problem_id], references: [id])
  tag        Tag     @relation(fields: [tag_id], references: [id])

  @@map("problem_tag")
}

model Tag {
  id          Int          @id @default(autoincrement())
  name        String
  type        String
  visible     Boolean      @default(true)
  create_time DateTime     @default(now())
  update_time DateTime     @updatedAt
  ProblemTag  ProblemTag[]

  @@map("tag")
}

model Contest {
  id                  Int         @id @default(autoincrement())
  created_by          User        @relation(fields: [created_by_id], references: [id], onDelete: SetNull)
  created_by_id       Int
  group               Group       @relation(fields: [group_id], references: [id])
  group_id            Int
  title               String
  description         String
  description_summary String      @db.VarChar(1200)
  start_time          DateTime
  end_time            DateTime
  visible             Boolean     @default(true)
  is_rank_visible     Boolean     @default(true)
  type                ContestType
  create_time         DateTime    @default(now())
  update_time         DateTime    @updatedAt

  ContestNotice  ContestNotice[]
  ContestProblem ContestProblem[]
  ContestRecord  ContestRecord[]
  ContestRankACM ContestRankACM[]
  Submission     Submission[]

  @@map("contest")
}

model ContestNotice {
  id          Int      @id @default(autoincrement())
  contest_id  Int
  title       String
  description String
  problem_id  String
  create_time DateTime @default(now())
  update_time DateTime @updatedAt
  contest     Contest  @relation(fields: [contest_id], references: [id])

  @@map("contest_notice")
}

model ContestProblem {
  id          Int      @id @default(autoincrement())
  contest_id  Int
  problem_id  Int
  score       Int      @default(0)
  create_time DateTime @default(now())
  update_time DateTime @updatedAt
  contest     Contest  @relation(fields: [contest_id], references: [id])
  problem     Problem  @relation(fields: [problem_id], references: [id])

  @@map("contest_problem")
}

model ContestRecord {
  id          Int      @id @default(autoincrement())
  contest_id  Int
  user_id     Int
  rank        Int
  create_time DateTime @default(now())
  update_time DateTime @updatedAt
  contest     Contest  @relation(fields: [contest_id], references: [id])
  user        User     @relation(fields: [user_id], references: [id])

  @@map("contest_record")
}

model ContestRankACM {
  id                   Int      @id @default(autoincrement())
  contest_id           Int
  user_id              Int
  accepted_problem_num Int      @default(0)
  total_penalty        Int      @default(0)
  submission_info      Json?
  create_time          DateTime @default(now())
  update_time          DateTime @updatedAt
  contest              Contest  @relation(fields: [contest_id], references: [id])
  user                 User     @relation(fields: [user_id], references: [id])

  @@map("contest_rank_acm")
}

model Workbook {
  id              Int               @id @default(autoincrement())
  created_by_id   Int
  group_id        Int
  title           String
  description     String
  start_time      DateTime
  end_time        DateTime
  visible         Boolean           @default(true)
  create_time     DateTime          @default(now())
  update_time     DateTime          @updatedAt
  created_by      User              @relation(fields: [created_by_id], references: [id], onDelete: SetNull)
  group           Group             @relation(fields: [group_id], references: [id])
  Submission      Submission[]
  WorkbookProblem WorkbookProblem[]

  @@map("workbook")
}

model WorkbookProblem {
  id          Int      @id @default(autoincrement())
  workbook_id Int
  problem_id  Int
  score       Int      @default(0)
  create_time DateTime @default(now())
  update_time DateTime @updatedAt
  problem     Problem  @relation(fields: [problem_id], references: [id])
  workbook    Workbook @relation(fields: [workbook_id], references: [id])

  @@map("workbook_problem")
}

model Submission {
  id               Int                @id @default(autoincrement())
  user_id          Int
  problem_id       Int
  contest_id       Int?
  workbook_id      Int?
  code             String
  language         String
  shared           Boolean            @default(false)
  ip_addr          String
  create_time      DateTime           @default(now())
  update_time      DateTime           @updatedAt
  contest          Contest?           @relation(fields: [contest_id], references: [id])
  problem          Problem            @relation(fields: [problem_id], references: [id])
  user             User               @relation(fields: [user_id], references: [id])
  workbook         Workbook?          @relation(fields: [workbook_id], references: [id])
  SubmissionResult SubmissionResult[]

  @@map("submission")
}

model SubmissionResult {
  id            Int        @id @default(autoincrement())
  submission_id Int
  result        String
  accepted_num  Int
  total_score   Int
  create_time   DateTime   @default(now())
  update_time   DateTime   @updatedAt
  submission    Submission @relation(fields: [submission_id], references: [id])

  @@map("submssion_result")
}

enum ContestType {
  ACM
  TotalScore
  ProblemBank
}
