name: CD - Development

on:
  push:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-frontend:
    name: Build frontend bundle
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build static bundle
        run: pnpm --filter frontend build

      - uses: actions/upload-artifact@v3
        with:
          name: frontend-bundle
          path: ./frontend/dist

  build-client-api:
    name: Build client-api image
    runs-on: ubuntu-latest
    steps:
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          file: ./backend/Dockerfile
          push: true
          build-args: 'target=client'
          tags: ghcr.io/${{ github.repository_owner }}/codedang-client-api:latest

  build-admin-api:
    name: Build admin-api image
    runs-on: ubuntu-latest
    steps:
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          file: ./backend/Dockerfile
          push: true
          build-args: 'target=admin'
          tags: ghcr.io/${{ github.repository_owner }}/codedang-admin-api:latest

  build-iris:
    name: Build Iris docker image
    runs-on: ubuntu-latest
    steps:
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push iris image
        uses: docker/build-push-action@v5
        with:
          push: true
          context: '{{defaultContext}}:iris'
          tags: ghcr.io/${{ github.repository_owner }}/codedang-iris:latest

  run-server:
    name: Run development server
    runs-on: self-hosted
    needs: [build-frontend, build-client-api, build-admin-api, build-iris]
    environment: development
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            docker-compose.yml
            scripts/deploy.sh
            .env.development
            Caddyfile

      - name: Load dotenv from secret
        run: echo "${{ secrets.ENV_DEVELOPMENT }}" > .env

      - name: Load frontend static bundle
        uses: actions/download-artifact@v3
        with:
          name: frontend-bundle
          path: ./dist

      - name: Check if containers are running
        id: check-container
        run: |
          {
            echo 'stdout<<EOF'
            docker compose --profile deploy ps -q
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Initialize containers
        if: steps.check-container.outputs.stdout == ''
        run: docker compose --profile deploy up -d --no-recreate

      - name: Pull docker images
        run: docker compose --profile update-target pull

      - name: Run docker compose up
        run: |
          docker compose --profile deploy up backend-client -d --no-deps
          docker compose --profile deploy up backend-admin -d --no-deps
          docker compose --profile deploy up iris -d --no-deps

      - name: Graceful reload Caddy
        run: docker exec -w /etc/caddy caddy caddy reload

      - name: Remove unused docker storages
        run: docker system prune -a -f --volumes

  e2e-test:
    name: Run E2E test
    runs-on: ubuntu-latest
    needs: [run-server]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Bruno CLI
        run: npm install -g @usebruno/cli

      - name: Run Bruno Collection (Client)
        working-directory: ./collection/client
        run: bru run --env development

      - name: Run Bruno Collection (Admin)
        working-directory: ./collection/admin
        run: bru run --env development
