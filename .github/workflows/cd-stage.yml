name: CD - Stage

on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-frontend:
    name: Build frontend image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          file: ./apps/frontend/Dockerfile # build with root context
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/codedang-frontend:${{github.sha}}
            ghcr.io/${{ github.repository_owner }}/codedang-frontend:stage
            ghcr.io/${{ github.repository_owner }}/codedang-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # TODO: change url back to stage.codedang.com
          build-args: |
            BASEURL=https://k8s-test.stage.codedang.com/api
            GQL_BASEURL=https://k8s-test.stage.codedang.com/graphql

  build-client-api:
    name: Build client-api image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # TODO: refactor this step to a reusable action
      - name: Determine next image tag
        id: tag
        env:
          OWNER: ${{ github.repository_owner }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          year=$(date +%Y)

          PKG="codedang-client-api"

          url="https://api.github.com/orgs/$OWNER/packages/container/$PKG/versions"

          tags=$(curl -fsSL -H "Authorization: Bearer $GITHUB_TOKEN" "$url" \
            |  jq -r '.[].metadata.container.tags[]' \
            |  grep "^${year}\.[0-9]\+$" || true)

          if [[ -z "$tags" ]]; then
            next="${year}.1"

          else
            max=$(echo "$tags" \
              | sed -E "s/^${year}\.([0-9]+)$/\1/" \
              | sort -n \
              | tail -n 1)
            next="${year}.$((max + 1))"
          fi
          echo "IMAGE_TAG=$next" >> "$GITHUB_ENV"

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          file: ./apps/backend/Dockerfile # build with root context
          push: true
          build-args: |
            target=client
            app_env=stage
          tags: |
            ghcr.io/${{ github.repository_owner }}/codedang-client-api:${{env.IMAGE_TAG}}
            ghcr.io/${{ github.repository_owner }}/codedang-client-api:${{github.sha}}
            ghcr.io/${{ github.repository_owner }}/codedang-client-api:stage
            ghcr.io/${{ github.repository_owner }}/codedang-client-api:latest

  build-admin-api:
    name: Build admin-api image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Determine next image tag
        id: tag
        env:
          OWNER: ${{ github.repository_owner }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          year=$(date +%Y)

          PKG="codedang-admin-api"

          url="https://api.github.com/orgs/$OWNER/packages/container/$PKG/versions"

          tags=$(curl -fsSL -H "Authorization: Bearer $GITHUB_TOKEN" "$url" \
            |  jq -r '.[].metadata.container.tags[]' \
            |  grep "^${year}\.[0-9]\+$" || true)

          if [[ -z "$tags" ]]; then
            next="${year}.1"

          else
            max=$(echo "$tags" \
              | sed -E "s/^${year}\.([0-9]+)$/\1/" \
              | sort -n \
              | tail -n 1)
            next="${year}.$((max + 1))"
          fi
          echo "IMAGE_TAG=$next" >> "$GITHUB_ENV"

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          file: ./apps/backend/Dockerfile # build with root context
          push: true
          build-args: |
            target=admin
            app_env=stage
          tags: |
            ghcr.io/${{ github.repository_owner }}/codedang-admin-api:${{env.IMAGE_TAG}}
            ghcr.io/${{ github.repository_owner }}/codedang-admin-api:${{github.sha}}
            ghcr.io/${{ github.repository_owner }}/codedang-admin-api:stage
            ghcr.io/${{ github.repository_owner }}/codedang-admin-api:latest

  build-iris:
    name: Build Iris docker image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Determine next image tag
        id: tag
        env:
          OWNER: ${{ github.repository_owner }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          year=$(date +%Y)

          PKG="codedang-iris"

          url="https://api.github.com/orgs/$OWNER/packages/container/$PKG/versions"

          tags=$(curl -fsSL -H "Authorization: Bearer $GITHUB_TOKEN" "$url" \
            |  jq -r '.[].metadata.container.tags[]' \
            |  grep "^${year}\.[0-9]\+$" || true)

          if [[ -z "$tags" ]]; then
            next="${year}.1"

          else
            max=$(echo "$tags" \
              | sed -E "s/^${year}\.([0-9]+)$/\1/" \
              | sort -n \
              | tail -n 1)
            next="${year}.$((max + 1))"
          fi
          echo "IMAGE_TAG=$next" >> "$GITHUB_ENV"

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push iris image
        uses: docker/build-push-action@v6
        with:
          push: true
          context: '{{defaultContext}}:apps/iris'
          build-args: |
            app_env=stage
          tags: |
            ghcr.io/${{ github.repository_owner }}/codedang-iris:${{env.IMAGE_TAG}}
            ghcr.io/${{ github.repository_owner }}/codedang-iris:${{github.sha}}
            ghcr.io/${{ github.repository_owner }}/codedang-iris:stage
            ghcr.io/${{ github.repository_owner }}/codedang-iris:latest

  run-server:
    name: Run stage server
    runs-on: self-hosted
    needs: [build-client-api, build-admin-api, build-iris]
    environment: stage
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            docker-compose.yml
            scripts/deploy.sh
            .env.development
            apps/infra/stage/server2/Caddyfile

      - name: Load dotenv from secret
        run: |
          echo "${{ secrets.ENV_DEVELOPMENT }}" > .env

      - name: Check if containers are running
        id: check-container
        run: |
          {
            echo 'stdout<<EOF'
            docker compose --profile deploy ps -q
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Initialize containers
        if: steps.check-container.outputs.stdout == ''
        run: docker compose --profile deploy up -d --no-recreate

      - name: Pull docker images
        run: docker compose --profile update-target pull

      - name: Run docker compose up
        run: |
          docker compose --profile deploy up backend-client -d --no-deps
          docker compose --profile deploy up backend-admin -d --no-deps
          docker compose --profile deploy up iris -d --no-deps

      - name: Copy Caddyfile into Caddy Container
        run: docker cp ./apps/infra/stage/server2/Caddyfile caddy:/etc/caddy/Caddyfile

      - name: Graceful reload Caddy
        run: docker exec -w /etc/caddy caddy caddy reload

      - name: Remove unused docker storages
        run: docker system prune -a -f --volumes

  # TODO: Uncomment this section when E2E test is ready

  # e2e-test:
  #   name: Run E2E test
  #   runs-on: ubuntu-latest
  #   needs: [run-server]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: 20

  #     - name: Install Bruno CLI
  #       run: npm install -g @usebruno/cli

  #     - name: Run Bruno Collection (Client)
  #       working-directory: ./collection/client
  #       run: bru run --env Stage

  #     - name: Run Bruno Collection (Admin)
  #       working-directory: ./collection/admin
  #       run: bru run --env Stage
