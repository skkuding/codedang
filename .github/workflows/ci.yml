name: CI

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, edited, synchronize, reopened]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [20]

    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Generate Prisma Client
        run: pnpm --filter backend exec prisma generate

      - name: Build (Frontend)
        run: pnpm --filter frontend build

      - name: Build (Backend)
        run: |
          pnpm --filter backend build
          pnpm --filter backend build admin

      - name: Cache dist
        uses: actions/cache@v3
        with:
          path: ./*/dist
          key: ${{ matrix.os }}-node-v${{ matrix.node }}-${{ github.sha }}

  lint:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [20]

    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: go.work

      - name: Lint pull request title
        if: ${{ github.event_name == 'pull_request' }}
        run: echo "${{ github.event.pull_request.title }}" | pnpm commitlint --verbose

      - name: Check style (Node.js)
        run: pnpm format:check

      - name: Check Style (Go)
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "Go files must be formatted with gofmt. Please run:"
            echo "  go fmt ./..."
            exit 1
          fi
        working-directory: ./iris

      - name: Lint (Node.js)
        run: pnpm lint

  test:
    runs-on: ${{ matrix.os }}

    env:
      DATABASE_URL: postgresql://postgres:1234@localhost:5432/skkuding?schema=public

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [20]

    services:
      postgres:
        image: postgres:16-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 1234
          POSTGRES_DB: skkuding

    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Check Prisma Migration
        run: |
          pnpm --filter backend exec prisma migrate diff \
            --from-migrations ./prisma/migrations \
            --to-schema-datamodel ./prisma/schema.prisma \
            --shadow-database-url ${{ env.DATABASE_URL }} \
            --exit-code ||
          echo "::error::Prisma migration is not up to date. Please run `pnpm prisma migrate dev` locally and commit the changes."

      - name: Migrate Prisma
        run: pnpm --filter backend exec prisma migrate reset --force

      - name: Check types in Typescript
        run: pnpm --filter backend exec tsc --noEmit

      - name: Test
        run: pnpm -r test
