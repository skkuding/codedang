name: RC - Deploy

on:
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2
  ECS_CLUSTER: Codedang-Api

permissions: # permissions to the job (for the OpenID Connection)
  id-token: write
  contents: read

jobs:
  rc-deploy-network:
    name: RC - Deploy Network
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_FOR_DEPLOY_RC }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.2

      - name: Create Terraform variable file
        working-directory: ./apps/infra/rc/network
        run: |
          echo 'env = "rc"' >> terraform.tfvars

      - name: Terraform Init Network
        working-directory: ./apps/infra/rc/network
        run: terraform init -backend-config="bucket=codedang-tf-state-rc"
      - name: Terraform Init Storage
        working-directory: ./apps/infra/rc/storage
        run: terraform init -backend-config="bucket=codedang-tf-state-rc"
      - name: Terraform Init Codedang
        working-directory: ./apps/infra/rc/codedang
        run: terraform init -backend-config="bucket=codedang-tf-state-rc"

      - name: Check Existing AWS Codedang Resources
        working-directory: ./apps/infra/rc/codedang
        run: |
          if terraform state list | grep -q .; then
            echo "Resources found. Proceeding with destroy."
            echo "CODEDANG_DESTROY_REQUIRED=true" >> $GITHUB_ENV
          else
            echo "No resources found. Skipping destroy."
            echo "CODEDANG_DESTROY_REQUIRED=false" >> $GITHUB_ENV
          fi
      - name: Terraform Destroy If There's Existing Codedang Resources
        if: env.CODEDANG_DESTROY_REQUIRED == 'true'
        working-directory: ./apps/infra/rc/codedang
        run: terraform destroy -auto-approve

      - name: Check Existing AWS Storage Resources
        working-directory: ./apps/infra/rc/storage
        run: |
          if terraform state list | grep -q .; then
            echo "Resources found. Proceeding with destroy."
            echo "STORAGE_DESTROY_REQUIRED=true" >> $GITHUB_ENV
          else
            echo "No resources found. Skipping destroy."
            echo "STORAGE_DESTROY_REQUIRED=false" >> $GITHUB_ENV
          fi
      - name: Terraform Destroy If There's Existing Storage Resources
        if: env.STORAGE_DESTROY_REQUIRED == 'true'
        working-directory: ./apps/infra/rc/storage
        run: terraform destroy -auto-approve

      - name: Terraform Plan
        working-directory: ./apps/infra/rc/network
        run: terraform plan -input=false -out=plan.out

      - name: Terraform Apply
        working-directory: ./apps/infra/rc/network
        run: terraform apply -input=false plan.out

  rc-deploy-storage:
    name: RC - Deploy Storage
    runs-on: ubuntu-latest
    needs: [rc-deploy-network]
    environment: production
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_FOR_DEPLOY_RC }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.2

      - name: Create Terraform variable file
        working-directory: ./apps/infra/rc/storage
        run: |
          echo 'env = "rc"' >> terraform.tfvars

      - name: Terraform Init Storage
        working-directory: ./apps/infra/rc/storage
        run: terraform init -backend-config="bucket=codedang-tf-state-rc"

      - name: Terraform Plan
        working-directory: ./apps/infra/rc/storage
        run: terraform plan -input=false -out=plan.out

      - name: Terraform Apply
        working-directory: ./apps/infra/rc/storage
        run: terraform apply -input=false plan.out

  rc-mask-db:
    uses: ./.github/workflows/rc-mask-db.yml
    secrets: inherit
    needs: [rc-deploy-storage]

  rc-build-image:
    uses: ./.github/workflows/rc-build-image.yml
    secrets: inherit # Passes all aws credential secrets from the caller context
    needs: [rc-deploy-storage]

  rc-deploy-codedang:
    name: RC - Deploy Terraform Codedang Project
    runs-on: ubuntu-latest
    needs: [rc-build-image]
    environment: production
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_FOR_DEPLOY_RC }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.2

      - name: Create Terraform variable file
        working-directory: ./apps/infra/rc/codedang
        run: |
          echo "$TFVARS_RC" >> terraform.tfvars
          echo "$OAUTH_GITHUB" >> terraform.tfvars
          echo "$OAUTH_KAKAO" >> terraform.tfvars
          echo 'env = "rc"' >> terraform.tfvars
        env:
          TFVARS_RC: ${{ secrets.TFVARS_RC }}
          OAUTH_GITHUB: ${{ secrets.OAUTH_GITHUB }}
          OAUTH_KAKAO: ${{ secrets.OAUTH_KAKAO }}

      - name: Terraform Init Codedang
        working-directory: ./apps/infra/rc/codedang
        run: terraform init -backend-config="bucket=codedang-tf-state-rc"

      - name: Terraform Destroy
        working-directory: ./apps/infra/rc/codedang
        run: terraform destroy -auto-approve

      - name: Terraform Plan
        working-directory: ./apps/infra/rc/codedang
        run: terraform plan -input=false -out=plan.out

      - name: Terraform Apply
        working-directory: ./apps/infra/rc/codedang
        run: terraform apply -input=false plan.out
